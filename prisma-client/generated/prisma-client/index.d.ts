// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  eventImage: (where?: EventImageWhereInput) => Promise<boolean>;
  eventUrl: (where?: EventUrlWhereInput) => Promise<boolean>;
  geoJson: (where?: GeoJsonWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  neighborhood: (where?: NeighborhoodWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventImage: (where: EventImageWhereUniqueInput) => EventImageNullablePromise;
  eventImages: (args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventImage>;
  eventImagesConnection: (args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventImageConnectionPromise;
  eventUrl: (where: EventUrlWhereUniqueInput) => EventUrlNullablePromise;
  eventUrls: (args?: {
    where?: EventUrlWhereInput;
    orderBy?: EventUrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventUrl>;
  eventUrlsConnection: (args?: {
    where?: EventUrlWhereInput;
    orderBy?: EventUrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventUrlConnectionPromise;
  geoJson: (where: GeoJsonWhereUniqueInput) => GeoJsonNullablePromise;
  geoJsons: (args?: {
    where?: GeoJsonWhereInput;
    orderBy?: GeoJsonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GeoJson>;
  geoJsonsConnection: (args?: {
    where?: GeoJsonWhereInput;
    orderBy?: GeoJsonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GeoJsonConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  neighborhood: (
    where: NeighborhoodWhereUniqueInput
  ) => NeighborhoodNullablePromise;
  neighborhoods: (args?: {
    where?: NeighborhoodWhereInput;
    orderBy?: NeighborhoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Neighborhood>;
  neighborhoodsConnection: (args?: {
    where?: NeighborhoodWhereInput;
    orderBy?: NeighborhoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NeighborhoodConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEventImage: (data: EventImageCreateInput) => EventImagePromise;
  updateEventImage: (args: {
    data: EventImageUpdateInput;
    where: EventImageWhereUniqueInput;
  }) => EventImagePromise;
  updateManyEventImages: (args: {
    data: EventImageUpdateManyMutationInput;
    where?: EventImageWhereInput;
  }) => BatchPayloadPromise;
  upsertEventImage: (args: {
    where: EventImageWhereUniqueInput;
    create: EventImageCreateInput;
    update: EventImageUpdateInput;
  }) => EventImagePromise;
  deleteEventImage: (where: EventImageWhereUniqueInput) => EventImagePromise;
  deleteManyEventImages: (where?: EventImageWhereInput) => BatchPayloadPromise;
  createEventUrl: (data: EventUrlCreateInput) => EventUrlPromise;
  updateEventUrl: (args: {
    data: EventUrlUpdateInput;
    where: EventUrlWhereUniqueInput;
  }) => EventUrlPromise;
  updateManyEventUrls: (args: {
    data: EventUrlUpdateManyMutationInput;
    where?: EventUrlWhereInput;
  }) => BatchPayloadPromise;
  upsertEventUrl: (args: {
    where: EventUrlWhereUniqueInput;
    create: EventUrlCreateInput;
    update: EventUrlUpdateInput;
  }) => EventUrlPromise;
  deleteEventUrl: (where: EventUrlWhereUniqueInput) => EventUrlPromise;
  deleteManyEventUrls: (where?: EventUrlWhereInput) => BatchPayloadPromise;
  createGeoJson: (data: GeoJsonCreateInput) => GeoJsonPromise;
  updateGeoJson: (args: {
    data: GeoJsonUpdateInput;
    where: GeoJsonWhereUniqueInput;
  }) => GeoJsonPromise;
  updateManyGeoJsons: (args: {
    data: GeoJsonUpdateManyMutationInput;
    where?: GeoJsonWhereInput;
  }) => BatchPayloadPromise;
  upsertGeoJson: (args: {
    where: GeoJsonWhereUniqueInput;
    create: GeoJsonCreateInput;
    update: GeoJsonUpdateInput;
  }) => GeoJsonPromise;
  deleteGeoJson: (where: GeoJsonWhereUniqueInput) => GeoJsonPromise;
  deleteManyGeoJsons: (where?: GeoJsonWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createNeighborhood: (data: NeighborhoodCreateInput) => NeighborhoodPromise;
  updateNeighborhood: (args: {
    data: NeighborhoodUpdateInput;
    where: NeighborhoodWhereUniqueInput;
  }) => NeighborhoodPromise;
  upsertNeighborhood: (args: {
    where: NeighborhoodWhereUniqueInput;
    create: NeighborhoodCreateInput;
    update: NeighborhoodUpdateInput;
  }) => NeighborhoodPromise;
  deleteNeighborhood: (
    where: NeighborhoodWhereUniqueInput
  ) => NeighborhoodPromise;
  deleteManyNeighborhoods: (
    where?: NeighborhoodWhereInput
  ) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventImage: (
    where?: EventImageSubscriptionWhereInput
  ) => EventImageSubscriptionPayloadSubscription;
  eventUrl: (
    where?: EventUrlSubscriptionWhereInput
  ) => EventUrlSubscriptionPayloadSubscription;
  geoJson: (
    where?: GeoJsonSubscriptionWhereInput
  ) => GeoJsonSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  neighborhood: (
    where?: NeighborhoodSubscriptionWhereInput
  ) => NeighborhoodSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TicketType = "PAID" | "FREE";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "auth0Id_ASC"
  | "auth0Id_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC"
  | "ticketType_ASC"
  | "ticketType_DESC";

export type EventImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC";

export type EventUrlOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "streetAddress_ASC"
  | "streetAddress_DESC"
  | "streetAddress2_ASC"
  | "streetAddress2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC"
  | "state_ASC"
  | "state_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC";

export type TagOrderByInput = "id_ASC" | "id_DESC" | "title_ASC" | "title_DESC";

export type GeoJsonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "geoJson_ASC"
  | "geoJson_DESC";

export type NeighborhoodOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  auth0Id?: Maybe<String>;
  auth0Id_not?: Maybe<String>;
  auth0Id_in?: Maybe<String[] | String>;
  auth0Id_not_in?: Maybe<String[] | String>;
  auth0Id_lt?: Maybe<String>;
  auth0Id_lte?: Maybe<String>;
  auth0Id_gt?: Maybe<String>;
  auth0Id_gte?: Maybe<String>;
  auth0Id_contains?: Maybe<String>;
  auth0Id_not_contains?: Maybe<String>;
  auth0Id_starts_with?: Maybe<String>;
  auth0Id_not_starts_with?: Maybe<String>;
  auth0Id_ends_with?: Maybe<String>;
  auth0Id_not_ends_with?: Maybe<String>;
  organizations_every?: Maybe<OrganizationWhereInput>;
  organizations_some?: Maybe<OrganizationWhereInput>;
  organizations_none?: Maybe<OrganizationWhereInput>;
  rsvps_every?: Maybe<EventWhereInput>;
  rsvps_some?: Maybe<EventWhereInput>;
  rsvps_none?: Maybe<EventWhereInput>;
  adminFor_every?: Maybe<EventWhereInput>;
  adminFor_some?: Maybe<EventWhereInput>;
  adminFor_none?: Maybe<EventWhereInput>;
  createdEvents_every?: Maybe<EventWhereInput>;
  createdEvents_some?: Maybe<EventWhereInput>;
  createdEvents_none?: Maybe<EventWhereInput>;
  createdImages_every?: Maybe<EventImageWhereInput>;
  createdImages_some?: Maybe<EventImageWhereInput>;
  createdImages_none?: Maybe<EventImageWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  ticketType_not?: Maybe<TicketType>;
  ticketType_in?: Maybe<TicketType[] | TicketType>;
  ticketType_not_in?: Maybe<TicketType[] | TicketType>;
  creator?: Maybe<UserWhereInput>;
  eventImages_every?: Maybe<EventImageWhereInput>;
  eventImages_some?: Maybe<EventImageWhereInput>;
  eventImages_none?: Maybe<EventImageWhereInput>;
  rsvps_every?: Maybe<UserWhereInput>;
  rsvps_some?: Maybe<UserWhereInput>;
  rsvps_none?: Maybe<UserWhereInput>;
  urls_every?: Maybe<EventUrlWhereInput>;
  urls_some?: Maybe<EventUrlWhereInput>;
  urls_none?: Maybe<EventUrlWhereInput>;
  admins_every?: Maybe<UserWhereInput>;
  admins_some?: Maybe<UserWhereInput>;
  admins_none?: Maybe<UserWhereInput>;
  locations_every?: Maybe<LocationWhereInput>;
  locations_some?: Maybe<LocationWhereInput>;
  locations_none?: Maybe<LocationWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface EventImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  creator?: Maybe<UserWhereInput>;
  event?: Maybe<EventWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventImageWhereInput[] | EventImageWhereInput>;
  OR?: Maybe<EventImageWhereInput[] | EventImageWhereInput>;
  NOT?: Maybe<EventImageWhereInput[] | EventImageWhereInput>;
}

export interface EventUrlWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<EventUrlWhereInput[] | EventUrlWhereInput>;
  OR?: Maybe<EventUrlWhereInput[] | EventUrlWhereInput>;
  NOT?: Maybe<EventUrlWhereInput[] | EventUrlWhereInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress_not?: Maybe<String>;
  streetAddress_in?: Maybe<String[] | String>;
  streetAddress_not_in?: Maybe<String[] | String>;
  streetAddress_lt?: Maybe<String>;
  streetAddress_lte?: Maybe<String>;
  streetAddress_gt?: Maybe<String>;
  streetAddress_gte?: Maybe<String>;
  streetAddress_contains?: Maybe<String>;
  streetAddress_not_contains?: Maybe<String>;
  streetAddress_starts_with?: Maybe<String>;
  streetAddress_not_starts_with?: Maybe<String>;
  streetAddress_ends_with?: Maybe<String>;
  streetAddress_not_ends_with?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  streetAddress2_not?: Maybe<String>;
  streetAddress2_in?: Maybe<String[] | String>;
  streetAddress2_not_in?: Maybe<String[] | String>;
  streetAddress2_lt?: Maybe<String>;
  streetAddress2_lte?: Maybe<String>;
  streetAddress2_gt?: Maybe<String>;
  streetAddress2_gte?: Maybe<String>;
  streetAddress2_contains?: Maybe<String>;
  streetAddress2_not_contains?: Maybe<String>;
  streetAddress2_starts_with?: Maybe<String>;
  streetAddress2_not_starts_with?: Maybe<String>;
  streetAddress2_ends_with?: Maybe<String>;
  streetAddress2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<Int>;
  zipcode_not?: Maybe<Int>;
  zipcode_in?: Maybe<Int[] | Int>;
  zipcode_not_in?: Maybe<Int[] | Int>;
  zipcode_lt?: Maybe<Int>;
  zipcode_lte?: Maybe<Int>;
  zipcode_gt?: Maybe<Int>;
  zipcode_gte?: Maybe<Int>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  event?: Maybe<EventWhereInput>;
  neighborhood?: Maybe<NeighborhoodWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface NeighborhoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  geoJson?: Maybe<GeoJsonWhereInput>;
  locations_every?: Maybe<LocationWhereInput>;
  locations_some?: Maybe<LocationWhereInput>;
  locations_none?: Maybe<LocationWhereInput>;
  AND?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
  OR?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
  NOT?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
}

export interface GeoJsonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  geoJson?: Maybe<String>;
  geoJson_not?: Maybe<String>;
  geoJson_in?: Maybe<String[] | String>;
  geoJson_not_in?: Maybe<String[] | String>;
  geoJson_lt?: Maybe<String>;
  geoJson_lte?: Maybe<String>;
  geoJson_gt?: Maybe<String>;
  geoJson_gte?: Maybe<String>;
  geoJson_contains?: Maybe<String>;
  geoJson_not_contains?: Maybe<String>;
  geoJson_starts_with?: Maybe<String>;
  geoJson_not_starts_with?: Maybe<String>;
  geoJson_ends_with?: Maybe<String>;
  geoJson_not_ends_with?: Maybe<String>;
  neighborhood?: Maybe<NeighborhoodWhereInput>;
  AND?: Maybe<GeoJsonWhereInput[] | GeoJsonWhereInput>;
  OR?: Maybe<GeoJsonWhereInput[] | GeoJsonWhereInput>;
  NOT?: Maybe<GeoJsonWhereInput[] | GeoJsonWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  events_every?: Maybe<EventWhereInput>;
  events_some?: Maybe<EventWhereInput>;
  events_none?: Maybe<EventWhereInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export type EventImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type EventUrlWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GeoJsonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NeighborhoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  title?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  auth0Id?: Maybe<String>;
}>;

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface UserCreateOneWithoutCreatedEventsInput {
  create?: Maybe<UserCreateWithoutCreatedEventsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedEventsInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventCreateManyWithoutAdminsInput>;
  createdImages?: Maybe<EventImageCreateManyWithoutCreatorInput>;
}

export interface OrganizationCreateManyWithoutUsersInput {
  create?: Maybe<
    OrganizationCreateWithoutUsersInput[] | OrganizationCreateWithoutUsersInput
  >;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
}

export interface OrganizationCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: String;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EventCreateManyWithoutRsvpsInput {
  create?: Maybe<EventCreateWithoutRsvpsInput[] | EventCreateWithoutRsvpsInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutRsvpsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface EventImageCreateManyWithoutEventInput {
  create?: Maybe<
    EventImageCreateWithoutEventInput[] | EventImageCreateWithoutEventInput
  >;
  connect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
}

export interface EventImageCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedImagesInput;
  url: String;
}

export interface UserCreateOneWithoutCreatedImagesInput {
  create?: Maybe<UserCreateWithoutCreatedImagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedImagesInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventCreateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventCreateManyWithoutCreatorInput>;
}

export interface EventCreateManyWithoutAdminsInput {
  create?: Maybe<
    EventCreateWithoutAdminsInput[] | EventCreateWithoutAdminsInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutAdminsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface UserCreateManyWithoutRsvpsInput {
  create?: Maybe<UserCreateWithoutRsvpsInput[] | UserCreateWithoutRsvpsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRsvpsInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  adminFor?: Maybe<EventCreateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventCreateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageCreateManyWithoutCreatorInput>;
}

export interface EventCreateManyWithoutCreatorInput {
  create?: Maybe<
    EventCreateWithoutCreatorInput[] | EventCreateWithoutCreatorInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface EventUrlCreateManyWithoutEventInput {
  create?: Maybe<
    EventUrlCreateWithoutEventInput[] | EventUrlCreateWithoutEventInput
  >;
  connect?: Maybe<EventUrlWhereUniqueInput[] | EventUrlWhereUniqueInput>;
}

export interface EventUrlCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface UserCreateManyWithoutAdminForInput {
  create?: Maybe<
    UserCreateWithoutAdminForInput[] | UserCreateWithoutAdminForInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutAdminForInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  createdEvents?: Maybe<EventCreateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageCreateManyWithoutCreatorInput>;
}

export interface EventImageCreateManyWithoutCreatorInput {
  create?: Maybe<
    EventImageCreateWithoutCreatorInput[] | EventImageCreateWithoutCreatorInput
  >;
  connect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
}

export interface EventImageCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  event?: Maybe<EventCreateOneWithoutEventImagesInput>;
  url: String;
}

export interface EventCreateOneWithoutEventImagesInput {
  create?: Maybe<EventCreateWithoutEventImagesInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutEventImagesInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface LocationCreateManyWithoutEventInput {
  create?: Maybe<
    LocationCreateWithoutEventInput[] | LocationCreateWithoutEventInput
  >;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
}

export interface LocationCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  name: String;
  streetAddress: String;
  streetAddress2?: Maybe<String>;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  neighborhood?: Maybe<NeighborhoodCreateOneWithoutLocationsInput>;
}

export interface NeighborhoodCreateOneWithoutLocationsInput {
  create?: Maybe<NeighborhoodCreateWithoutLocationsInput>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodCreateWithoutLocationsInput {
  id?: Maybe<ID_Input>;
  geoJson: GeoJsonCreateOneWithoutNeighborhoodInput;
}

export interface GeoJsonCreateOneWithoutNeighborhoodInput {
  create?: Maybe<GeoJsonCreateWithoutNeighborhoodInput>;
  connect?: Maybe<GeoJsonWhereUniqueInput>;
}

export interface GeoJsonCreateWithoutNeighborhoodInput {
  id?: Maybe<ID_Input>;
  geoJson: String;
}

export interface TagCreateManyWithoutEventsInput {
  create?: Maybe<TagCreateWithoutEventsInput[] | TagCreateWithoutEventsInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutEventsInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface EventUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface UserUpdateOneWithoutCreatedEventsInput {
  create?: Maybe<UserCreateWithoutCreatedEventsInput>;
  update?: Maybe<UserUpdateWithoutCreatedEventsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedEventsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreatedEventsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventUpdateManyWithoutAdminsInput>;
  createdImages?: Maybe<EventImageUpdateManyWithoutCreatorInput>;
}

export interface OrganizationUpdateManyWithoutUsersInput {
  create?: Maybe<
    OrganizationCreateWithoutUsersInput[] | OrganizationCreateWithoutUsersInput
  >;
  delete?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  set?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  disconnect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  update?: Maybe<
    | OrganizationUpdateWithWhereUniqueWithoutUsersInput[]
    | OrganizationUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | OrganizationUpsertWithWhereUniqueWithoutUsersInput[]
    | OrganizationUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<
    OrganizationScalarWhereInput[] | OrganizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrganizationUpdateManyWithWhereNestedInput[]
    | OrganizationUpdateManyWithWhereNestedInput
  >;
}

export interface OrganizationUpdateWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput;
  data: OrganizationUpdateWithoutUsersDataInput;
}

export interface OrganizationUpdateWithoutUsersDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface OrganizationUpsertWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput;
  update: OrganizationUpdateWithoutUsersDataInput;
  create: OrganizationCreateWithoutUsersInput;
}

export interface OrganizationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  OR?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  NOT?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
}

export interface OrganizationUpdateManyWithWhereNestedInput {
  where: OrganizationScalarWhereInput;
  data: OrganizationUpdateManyDataInput;
}

export interface OrganizationUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EventUpdateManyWithoutRsvpsInput {
  create?: Maybe<EventCreateWithoutRsvpsInput[] | EventCreateWithoutRsvpsInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutRsvpsInput[]
    | EventUpdateWithWhereUniqueWithoutRsvpsInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutRsvpsInput[]
    | EventUpsertWithWhereUniqueWithoutRsvpsInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutRsvpsDataInput;
}

export interface EventUpdateWithoutRsvpsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface EventImageUpdateManyWithoutEventInput {
  create?: Maybe<
    EventImageCreateWithoutEventInput[] | EventImageCreateWithoutEventInput
  >;
  delete?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  connect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  set?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  disconnect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  update?: Maybe<
    | EventImageUpdateWithWhereUniqueWithoutEventInput[]
    | EventImageUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | EventImageUpsertWithWhereUniqueWithoutEventInput[]
    | EventImageUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<EventImageScalarWhereInput[] | EventImageScalarWhereInput>;
  updateMany?: Maybe<
    | EventImageUpdateManyWithWhereNestedInput[]
    | EventImageUpdateManyWithWhereNestedInput
  >;
}

export interface EventImageUpdateWithWhereUniqueWithoutEventInput {
  where: EventImageWhereUniqueInput;
  data: EventImageUpdateWithoutEventDataInput;
}

export interface EventImageUpdateWithoutEventDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedImagesInput>;
  url?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutCreatedImagesInput {
  create?: Maybe<UserCreateWithoutCreatedImagesInput>;
  update?: Maybe<UserUpdateWithoutCreatedImagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedImagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreatedImagesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventUpdateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventUpdateManyWithoutCreatorInput>;
}

export interface EventUpdateManyWithoutAdminsInput {
  create?: Maybe<
    EventCreateWithoutAdminsInput[] | EventCreateWithoutAdminsInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutAdminsInput[]
    | EventUpdateWithWhereUniqueWithoutAdminsInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutAdminsInput[]
    | EventUpsertWithWhereUniqueWithoutAdminsInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutAdminsDataInput;
}

export interface EventUpdateWithoutAdminsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface UserUpdateManyWithoutRsvpsInput {
  create?: Maybe<UserCreateWithoutRsvpsInput[] | UserCreateWithoutRsvpsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRsvpsInput[]
    | UserUpdateWithWhereUniqueWithoutRsvpsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRsvpsInput[]
    | UserUpsertWithWhereUniqueWithoutRsvpsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRsvpsDataInput;
}

export interface UserUpdateWithoutRsvpsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  adminFor?: Maybe<EventUpdateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventUpdateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageUpdateManyWithoutCreatorInput>;
}

export interface EventUpdateManyWithoutCreatorInput {
  create?: Maybe<
    EventCreateWithoutCreatorInput[] | EventCreateWithoutCreatorInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutCreatorInput[]
    | EventUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutCreatorInput[]
    | EventUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutCreatorDataInput;
}

export interface EventUpdateWithoutCreatorDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface EventUrlUpdateManyWithoutEventInput {
  create?: Maybe<
    EventUrlCreateWithoutEventInput[] | EventUrlCreateWithoutEventInput
  >;
  delete?: Maybe<EventUrlWhereUniqueInput[] | EventUrlWhereUniqueInput>;
  connect?: Maybe<EventUrlWhereUniqueInput[] | EventUrlWhereUniqueInput>;
  set?: Maybe<EventUrlWhereUniqueInput[] | EventUrlWhereUniqueInput>;
  disconnect?: Maybe<EventUrlWhereUniqueInput[] | EventUrlWhereUniqueInput>;
  update?: Maybe<
    | EventUrlUpdateWithWhereUniqueWithoutEventInput[]
    | EventUrlUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | EventUrlUpsertWithWhereUniqueWithoutEventInput[]
    | EventUrlUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<EventUrlScalarWhereInput[] | EventUrlScalarWhereInput>;
  updateMany?: Maybe<
    | EventUrlUpdateManyWithWhereNestedInput[]
    | EventUrlUpdateManyWithWhereNestedInput
  >;
}

export interface EventUrlUpdateWithWhereUniqueWithoutEventInput {
  where: EventUrlWhereUniqueInput;
  data: EventUrlUpdateWithoutEventDataInput;
}

export interface EventUrlUpdateWithoutEventDataInput {
  url?: Maybe<String>;
}

export interface EventUrlUpsertWithWhereUniqueWithoutEventInput {
  where: EventUrlWhereUniqueInput;
  update: EventUrlUpdateWithoutEventDataInput;
  create: EventUrlCreateWithoutEventInput;
}

export interface EventUrlScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventUrlScalarWhereInput[] | EventUrlScalarWhereInput>;
  OR?: Maybe<EventUrlScalarWhereInput[] | EventUrlScalarWhereInput>;
  NOT?: Maybe<EventUrlScalarWhereInput[] | EventUrlScalarWhereInput>;
}

export interface EventUrlUpdateManyWithWhereNestedInput {
  where: EventUrlScalarWhereInput;
  data: EventUrlUpdateManyDataInput;
}

export interface EventUrlUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface UserUpdateManyWithoutAdminForInput {
  create?: Maybe<
    UserCreateWithoutAdminForInput[] | UserCreateWithoutAdminForInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutAdminForInput[]
    | UserUpdateWithWhereUniqueWithoutAdminForInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutAdminForInput[]
    | UserUpsertWithWhereUniqueWithoutAdminForInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutAdminForInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAdminForDataInput;
}

export interface UserUpdateWithoutAdminForDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  createdEvents?: Maybe<EventUpdateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageUpdateManyWithoutCreatorInput>;
}

export interface EventImageUpdateManyWithoutCreatorInput {
  create?: Maybe<
    EventImageCreateWithoutCreatorInput[] | EventImageCreateWithoutCreatorInput
  >;
  delete?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  connect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  set?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  disconnect?: Maybe<EventImageWhereUniqueInput[] | EventImageWhereUniqueInput>;
  update?: Maybe<
    | EventImageUpdateWithWhereUniqueWithoutCreatorInput[]
    | EventImageUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | EventImageUpsertWithWhereUniqueWithoutCreatorInput[]
    | EventImageUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<EventImageScalarWhereInput[] | EventImageScalarWhereInput>;
  updateMany?: Maybe<
    | EventImageUpdateManyWithWhereNestedInput[]
    | EventImageUpdateManyWithWhereNestedInput
  >;
}

export interface EventImageUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventImageWhereUniqueInput;
  data: EventImageUpdateWithoutCreatorDataInput;
}

export interface EventImageUpdateWithoutCreatorDataInput {
  event?: Maybe<EventUpdateOneWithoutEventImagesInput>;
  url?: Maybe<String>;
}

export interface EventUpdateOneWithoutEventImagesInput {
  create?: Maybe<EventCreateWithoutEventImagesInput>;
  update?: Maybe<EventUpdateWithoutEventImagesDataInput>;
  upsert?: Maybe<EventUpsertWithoutEventImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutEventImagesDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface LocationUpdateManyWithoutEventInput {
  create?: Maybe<
    LocationCreateWithoutEventInput[] | LocationCreateWithoutEventInput
  >;
  delete?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  set?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  disconnect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  update?: Maybe<
    | LocationUpdateWithWhereUniqueWithoutEventInput[]
    | LocationUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | LocationUpsertWithWhereUniqueWithoutEventInput[]
    | LocationUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  updateMany?: Maybe<
    | LocationUpdateManyWithWhereNestedInput[]
    | LocationUpdateManyWithWhereNestedInput
  >;
}

export interface LocationUpdateWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput;
  data: LocationUpdateWithoutEventDataInput;
}

export interface LocationUpdateWithoutEventDataInput {
  name?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  neighborhood?: Maybe<NeighborhoodUpdateOneWithoutLocationsInput>;
}

export interface NeighborhoodUpdateOneWithoutLocationsInput {
  create?: Maybe<NeighborhoodCreateWithoutLocationsInput>;
  update?: Maybe<NeighborhoodUpdateWithoutLocationsDataInput>;
  upsert?: Maybe<NeighborhoodUpsertWithoutLocationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodUpdateWithoutLocationsDataInput {
  geoJson?: Maybe<GeoJsonUpdateOneRequiredWithoutNeighborhoodInput>;
}

export interface GeoJsonUpdateOneRequiredWithoutNeighborhoodInput {
  create?: Maybe<GeoJsonCreateWithoutNeighborhoodInput>;
  update?: Maybe<GeoJsonUpdateWithoutNeighborhoodDataInput>;
  upsert?: Maybe<GeoJsonUpsertWithoutNeighborhoodInput>;
  connect?: Maybe<GeoJsonWhereUniqueInput>;
}

export interface GeoJsonUpdateWithoutNeighborhoodDataInput {
  geoJson?: Maybe<String>;
}

export interface GeoJsonUpsertWithoutNeighborhoodInput {
  update: GeoJsonUpdateWithoutNeighborhoodDataInput;
  create: GeoJsonCreateWithoutNeighborhoodInput;
}

export interface NeighborhoodUpsertWithoutLocationsInput {
  update: NeighborhoodUpdateWithoutLocationsDataInput;
  create: NeighborhoodCreateWithoutLocationsInput;
}

export interface LocationUpsertWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput;
  update: LocationUpdateWithoutEventDataInput;
  create: LocationCreateWithoutEventInput;
}

export interface LocationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress_not?: Maybe<String>;
  streetAddress_in?: Maybe<String[] | String>;
  streetAddress_not_in?: Maybe<String[] | String>;
  streetAddress_lt?: Maybe<String>;
  streetAddress_lte?: Maybe<String>;
  streetAddress_gt?: Maybe<String>;
  streetAddress_gte?: Maybe<String>;
  streetAddress_contains?: Maybe<String>;
  streetAddress_not_contains?: Maybe<String>;
  streetAddress_starts_with?: Maybe<String>;
  streetAddress_not_starts_with?: Maybe<String>;
  streetAddress_ends_with?: Maybe<String>;
  streetAddress_not_ends_with?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  streetAddress2_not?: Maybe<String>;
  streetAddress2_in?: Maybe<String[] | String>;
  streetAddress2_not_in?: Maybe<String[] | String>;
  streetAddress2_lt?: Maybe<String>;
  streetAddress2_lte?: Maybe<String>;
  streetAddress2_gt?: Maybe<String>;
  streetAddress2_gte?: Maybe<String>;
  streetAddress2_contains?: Maybe<String>;
  streetAddress2_not_contains?: Maybe<String>;
  streetAddress2_starts_with?: Maybe<String>;
  streetAddress2_not_starts_with?: Maybe<String>;
  streetAddress2_ends_with?: Maybe<String>;
  streetAddress2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<Int>;
  zipcode_not?: Maybe<Int>;
  zipcode_in?: Maybe<Int[] | Int>;
  zipcode_not_in?: Maybe<Int[] | Int>;
  zipcode_lt?: Maybe<Int>;
  zipcode_lte?: Maybe<Int>;
  zipcode_gt?: Maybe<Int>;
  zipcode_gte?: Maybe<Int>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  latitude?: Maybe<Float>;
  latitude_not?: Maybe<Float>;
  latitude_in?: Maybe<Float[] | Float>;
  latitude_not_in?: Maybe<Float[] | Float>;
  latitude_lt?: Maybe<Float>;
  latitude_lte?: Maybe<Float>;
  latitude_gt?: Maybe<Float>;
  latitude_gte?: Maybe<Float>;
  longitude?: Maybe<Float>;
  longitude_not?: Maybe<Float>;
  longitude_in?: Maybe<Float[] | Float>;
  longitude_not_in?: Maybe<Float[] | Float>;
  longitude_lt?: Maybe<Float>;
  longitude_lte?: Maybe<Float>;
  longitude_gt?: Maybe<Float>;
  longitude_gte?: Maybe<Float>;
  AND?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  OR?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  NOT?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
}

export interface LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput;
  data: LocationUpdateManyDataInput;
}

export interface LocationUpdateManyDataInput {
  name?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface TagUpdateManyWithoutEventsInput {
  create?: Maybe<TagCreateWithoutEventsInput[] | TagCreateWithoutEventsInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutEventsInput[]
    | TagUpdateWithWhereUniqueWithoutEventsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutEventsInput[]
    | TagUpsertWithWhereUniqueWithoutEventsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutEventsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutEventsDataInput;
}

export interface TagUpdateWithoutEventsDataInput {
  title?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutEventsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutEventsDataInput;
  create: TagCreateWithoutEventsInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface EventUpsertWithoutEventImagesInput {
  update: EventUpdateWithoutEventImagesDataInput;
  create: EventCreateWithoutEventImagesInput;
}

export interface EventImageUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventImageWhereUniqueInput;
  update: EventImageUpdateWithoutCreatorDataInput;
  create: EventImageCreateWithoutCreatorInput;
}

export interface EventImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventImageScalarWhereInput[] | EventImageScalarWhereInput>;
  OR?: Maybe<EventImageScalarWhereInput[] | EventImageScalarWhereInput>;
  NOT?: Maybe<EventImageScalarWhereInput[] | EventImageScalarWhereInput>;
}

export interface EventImageUpdateManyWithWhereNestedInput {
  where: EventImageScalarWhereInput;
  data: EventImageUpdateManyDataInput;
}

export interface EventImageUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutAdminForInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAdminForDataInput;
  create: UserCreateWithoutAdminForInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  auth0Id?: Maybe<String>;
  auth0Id_not?: Maybe<String>;
  auth0Id_in?: Maybe<String[] | String>;
  auth0Id_not_in?: Maybe<String[] | String>;
  auth0Id_lt?: Maybe<String>;
  auth0Id_lte?: Maybe<String>;
  auth0Id_gt?: Maybe<String>;
  auth0Id_gte?: Maybe<String>;
  auth0Id_contains?: Maybe<String>;
  auth0Id_not_contains?: Maybe<String>;
  auth0Id_starts_with?: Maybe<String>;
  auth0Id_not_starts_with?: Maybe<String>;
  auth0Id_ends_with?: Maybe<String>;
  auth0Id_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
}

export interface EventUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutCreatorDataInput;
  create: EventCreateWithoutCreatorInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  ticketType_not?: Maybe<TicketType>;
  ticketType_in?: Maybe<TicketType[] | TicketType>;
  ticketType_not_in?: Maybe<TicketType[] | TicketType>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
}

export interface UserUpsertWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRsvpsDataInput;
  create: UserCreateWithoutRsvpsInput;
}

export interface EventUpsertWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutAdminsDataInput;
  create: EventCreateWithoutAdminsInput;
}

export interface UserUpsertWithoutCreatedImagesInput {
  update: UserUpdateWithoutCreatedImagesDataInput;
  create: UserCreateWithoutCreatedImagesInput;
}

export interface EventImageUpsertWithWhereUniqueWithoutEventInput {
  where: EventImageWhereUniqueInput;
  update: EventImageUpdateWithoutEventDataInput;
  create: EventImageCreateWithoutEventInput;
}

export interface EventUpsertWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutRsvpsDataInput;
  create: EventCreateWithoutRsvpsInput;
}

export interface UserUpsertWithoutCreatedEventsInput {
  update: UserUpdateWithoutCreatedEventsDataInput;
  create: UserCreateWithoutCreatedEventsInput;
}

export interface EventUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
}

export interface EventImageCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedImagesInput;
  event?: Maybe<EventCreateOneWithoutEventImagesInput>;
  url: String;
}

export interface EventImageUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedImagesInput>;
  event?: Maybe<EventUpdateOneWithoutEventImagesInput>;
  url?: Maybe<String>;
}

export interface EventImageUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface EventUrlCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  event: EventCreateOneWithoutUrlsInput;
}

export interface EventCreateOneWithoutUrlsInput {
  create?: Maybe<EventCreateWithoutUrlsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutUrlsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface EventUrlUpdateInput {
  url?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutUrlsInput>;
}

export interface EventUpdateOneRequiredWithoutUrlsInput {
  create?: Maybe<EventCreateWithoutUrlsInput>;
  update?: Maybe<EventUpdateWithoutUrlsDataInput>;
  upsert?: Maybe<EventUpsertWithoutUrlsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutUrlsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface EventUpsertWithoutUrlsInput {
  update: EventUpdateWithoutUrlsDataInput;
  create: EventCreateWithoutUrlsInput;
}

export interface EventUrlUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface GeoJsonCreateInput {
  id?: Maybe<ID_Input>;
  geoJson: String;
  neighborhood: NeighborhoodCreateOneWithoutGeoJsonInput;
}

export interface NeighborhoodCreateOneWithoutGeoJsonInput {
  create?: Maybe<NeighborhoodCreateWithoutGeoJsonInput>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodCreateWithoutGeoJsonInput {
  id?: Maybe<ID_Input>;
  locations?: Maybe<LocationCreateManyWithoutNeighborhoodInput>;
}

export interface LocationCreateManyWithoutNeighborhoodInput {
  create?: Maybe<
    | LocationCreateWithoutNeighborhoodInput[]
    | LocationCreateWithoutNeighborhoodInput
  >;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
}

export interface LocationCreateWithoutNeighborhoodInput {
  id?: Maybe<ID_Input>;
  name: String;
  streetAddress: String;
  streetAddress2?: Maybe<String>;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  event: EventCreateOneWithoutLocationsInput;
}

export interface EventCreateOneWithoutLocationsInput {
  create?: Maybe<EventCreateWithoutLocationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutLocationsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  tags?: Maybe<TagCreateManyWithoutEventsInput>;
}

export interface GeoJsonUpdateInput {
  geoJson?: Maybe<String>;
  neighborhood?: Maybe<NeighborhoodUpdateOneRequiredWithoutGeoJsonInput>;
}

export interface NeighborhoodUpdateOneRequiredWithoutGeoJsonInput {
  create?: Maybe<NeighborhoodCreateWithoutGeoJsonInput>;
  update?: Maybe<NeighborhoodUpdateWithoutGeoJsonDataInput>;
  upsert?: Maybe<NeighborhoodUpsertWithoutGeoJsonInput>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodUpdateWithoutGeoJsonDataInput {
  locations?: Maybe<LocationUpdateManyWithoutNeighborhoodInput>;
}

export interface LocationUpdateManyWithoutNeighborhoodInput {
  create?: Maybe<
    | LocationCreateWithoutNeighborhoodInput[]
    | LocationCreateWithoutNeighborhoodInput
  >;
  delete?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  set?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  disconnect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  update?: Maybe<
    | LocationUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    | LocationUpdateWithWhereUniqueWithoutNeighborhoodInput
  >;
  upsert?: Maybe<
    | LocationUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    | LocationUpsertWithWhereUniqueWithoutNeighborhoodInput
  >;
  deleteMany?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  updateMany?: Maybe<
    | LocationUpdateManyWithWhereNestedInput[]
    | LocationUpdateManyWithWhereNestedInput
  >;
}

export interface LocationUpdateWithWhereUniqueWithoutNeighborhoodInput {
  where: LocationWhereUniqueInput;
  data: LocationUpdateWithoutNeighborhoodDataInput;
}

export interface LocationUpdateWithoutNeighborhoodDataInput {
  name?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  event?: Maybe<EventUpdateOneRequiredWithoutLocationsInput>;
}

export interface EventUpdateOneRequiredWithoutLocationsInput {
  create?: Maybe<EventCreateWithoutLocationsInput>;
  update?: Maybe<EventUpdateWithoutLocationsDataInput>;
  upsert?: Maybe<EventUpsertWithoutLocationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutLocationsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  tags?: Maybe<TagUpdateManyWithoutEventsInput>;
}

export interface EventUpsertWithoutLocationsInput {
  update: EventUpdateWithoutLocationsDataInput;
  create: EventCreateWithoutLocationsInput;
}

export interface LocationUpsertWithWhereUniqueWithoutNeighborhoodInput {
  where: LocationWhereUniqueInput;
  update: LocationUpdateWithoutNeighborhoodDataInput;
  create: LocationCreateWithoutNeighborhoodInput;
}

export interface NeighborhoodUpsertWithoutGeoJsonInput {
  update: NeighborhoodUpdateWithoutGeoJsonDataInput;
  create: NeighborhoodCreateWithoutGeoJsonInput;
}

export interface GeoJsonUpdateManyMutationInput {
  geoJson?: Maybe<String>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  streetAddress: String;
  streetAddress2?: Maybe<String>;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  event: EventCreateOneWithoutLocationsInput;
  neighborhood?: Maybe<NeighborhoodCreateOneWithoutLocationsInput>;
}

export interface LocationUpdateInput {
  name?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
  event?: Maybe<EventUpdateOneRequiredWithoutLocationsInput>;
  neighborhood?: Maybe<NeighborhoodUpdateOneWithoutLocationsInput>;
}

export interface LocationUpdateManyMutationInput {
  name?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<Float>;
  longitude?: Maybe<Float>;
}

export interface NeighborhoodCreateInput {
  id?: Maybe<ID_Input>;
  geoJson: GeoJsonCreateOneWithoutNeighborhoodInput;
  locations?: Maybe<LocationCreateManyWithoutNeighborhoodInput>;
}

export interface NeighborhoodUpdateInput {
  geoJson?: Maybe<GeoJsonUpdateOneRequiredWithoutNeighborhoodInput>;
  locations?: Maybe<LocationUpdateManyWithoutNeighborhoodInput>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutOrganizationsInput>;
}

export interface UserCreateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrganizationsInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventCreateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventCreateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageCreateManyWithoutCreatorInput>;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutOrganizationsInput>;
}

export interface UserUpdateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrganizationsDataInput;
}

export interface UserUpdateWithoutOrganizationsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventUpdateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventUpdateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageUpdateManyWithoutCreatorInput>;
}

export interface UserUpsertWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrganizationsDataInput;
  create: UserCreateWithoutOrganizationsInput;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  events?: Maybe<EventCreateManyWithoutTagsInput>;
}

export interface EventCreateManyWithoutTagsInput {
  create?: Maybe<EventCreateWithoutTagsInput[] | EventCreateWithoutTagsInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  ticketType: TicketType;
  creator?: Maybe<UserCreateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdminForInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface TagUpdateInput {
  title?: Maybe<String>;
  events?: Maybe<EventUpdateManyWithoutTagsInput>;
}

export interface EventUpdateManyWithoutTagsInput {
  create?: Maybe<EventCreateWithoutTagsInput[] | EventCreateWithoutTagsInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutTagsInput[]
    | EventUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutTagsInput[]
    | EventUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutTagsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutTagsDataInput;
}

export interface EventUpdateWithoutTagsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  ticketType?: Maybe<TicketType>;
  creator?: Maybe<UserUpdateOneWithoutCreatedEventsInput>;
  eventImages?: Maybe<EventImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<EventUrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdminForInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface EventUpsertWithWhereUniqueWithoutTagsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutTagsDataInput;
  create: EventCreateWithoutTagsInput;
}

export interface TagUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventCreateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventCreateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageCreateManyWithoutCreatorInput>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  adminFor?: Maybe<EventUpdateManyWithoutAdminsInput>;
  createdEvents?: Maybe<EventUpdateManyWithoutCreatorInput>;
  createdImages?: Maybe<EventImageUpdateManyWithoutCreatorInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  auth0Id?: Maybe<String>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface EventImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventImageWhereInput>;
  AND?: Maybe<
    EventImageSubscriptionWhereInput[] | EventImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    EventImageSubscriptionWhereInput[] | EventImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EventImageSubscriptionWhereInput[] | EventImageSubscriptionWhereInput
  >;
}

export interface EventUrlSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventUrlWhereInput>;
  AND?: Maybe<
    EventUrlSubscriptionWhereInput[] | EventUrlSubscriptionWhereInput
  >;
  OR?: Maybe<EventUrlSubscriptionWhereInput[] | EventUrlSubscriptionWhereInput>;
  NOT?: Maybe<
    EventUrlSubscriptionWhereInput[] | EventUrlSubscriptionWhereInput
  >;
}

export interface GeoJsonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GeoJsonWhereInput>;
  AND?: Maybe<GeoJsonSubscriptionWhereInput[] | GeoJsonSubscriptionWhereInput>;
  OR?: Maybe<GeoJsonSubscriptionWhereInput[] | GeoJsonSubscriptionWhereInput>;
  NOT?: Maybe<GeoJsonSubscriptionWhereInput[] | GeoJsonSubscriptionWhereInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface NeighborhoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NeighborhoodWhereInput>;
  AND?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
  OR?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Event {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
  ticketType: TicketType;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  ticketType: () => Promise<TicketType>;
  creator: <T = UserPromise>() => T;
  eventImages: <T = FragmentableArray<EventImage>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = FragmentableArray<EventUrl>>(args?: {
    where?: EventUrlWhereInput;
    orderBy?: EventUrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  ticketType: () => Promise<AsyncIterator<TicketType>>;
  creator: <T = UserSubscription>() => T;
  eventImages: <T = Promise<AsyncIterator<EventImageSubscription>>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = Promise<AsyncIterator<EventUrlSubscription>>>(args?: {
    where?: EventUrlWhereInput;
    orderBy?: EventUrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = Promise<AsyncIterator<LocationSubscription>>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  ticketType: () => Promise<TicketType>;
  creator: <T = UserPromise>() => T;
  eventImages: <T = FragmentableArray<EventImage>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = FragmentableArray<EventUrl>>(args?: {
    where?: EventUrlWhereInput;
    orderBy?: EventUrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  auth0Id: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  auth0Id: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  adminFor: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEvents: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdImages: <T = FragmentableArray<EventImage>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  auth0Id: () => Promise<AsyncIterator<String>>;
  organizations: <T = Promise<AsyncIterator<OrganizationSubscription>>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  adminFor: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEvents: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdImages: <T = Promise<AsyncIterator<EventImageSubscription>>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  auth0Id: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  adminFor: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdEvents: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdImages: <T = FragmentableArray<EventImage>>(args?: {
    where?: EventImageWhereInput;
    orderBy?: EventImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Organization {
  id: ID_Output;
  name: String;
  url?: String;
  phone?: String;
  email?: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventImage {
  id: ID_Output;
  url: String;
}

export interface EventImagePromise extends Promise<EventImage>, Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  event: <T = EventPromise>() => T;
  url: () => Promise<String>;
}

export interface EventImageSubscription
  extends Promise<AsyncIterator<EventImage>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  creator: <T = UserSubscription>() => T;
  event: <T = EventSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
}

export interface EventImageNullablePromise
  extends Promise<EventImage | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  creator: <T = UserPromise>() => T;
  event: <T = EventPromise>() => T;
  url: () => Promise<String>;
}

export interface EventUrl {
  id: ID_Output;
  url: String;
}

export interface EventUrlPromise extends Promise<EventUrl>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface EventUrlSubscription
  extends Promise<AsyncIterator<EventUrl>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  event: <T = EventSubscription>() => T;
}

export interface EventUrlNullablePromise
  extends Promise<EventUrl | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface Location {
  id: ID_Output;
  name: String;
  streetAddress: String;
  streetAddress2?: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Float;
  longitude?: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  streetAddress: () => Promise<String>;
  streetAddress2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  event: <T = EventPromise>() => T;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  streetAddress2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
  event: <T = EventSubscription>() => T;
  neighborhood: <T = NeighborhoodSubscription>() => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  streetAddress: () => Promise<String>;
  streetAddress2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
  event: <T = EventPromise>() => T;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface Neighborhood {
  id: ID_Output;
}

export interface NeighborhoodPromise
  extends Promise<Neighborhood>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geoJson: <T = GeoJsonPromise>() => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NeighborhoodSubscription
  extends Promise<AsyncIterator<Neighborhood>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geoJson: <T = GeoJsonSubscription>() => T;
  locations: <T = Promise<AsyncIterator<LocationSubscription>>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NeighborhoodNullablePromise
  extends Promise<Neighborhood | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geoJson: <T = GeoJsonPromise>() => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GeoJson {
  id: ID_Output;
  geoJson: String;
}

export interface GeoJsonPromise extends Promise<GeoJson>, Fragmentable {
  id: () => Promise<ID_Output>;
  geoJson: () => Promise<String>;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface GeoJsonSubscription
  extends Promise<AsyncIterator<GeoJson>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geoJson: () => Promise<AsyncIterator<String>>;
  neighborhood: <T = NeighborhoodSubscription>() => T;
}

export interface GeoJsonNullablePromise
  extends Promise<GeoJson | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geoJson: () => Promise<String>;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface Tag {
  id: ID_Output;
  title: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  events: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  events: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventImageConnection {
  pageInfo: PageInfo;
  edges: EventImageEdge[];
}

export interface EventImageConnectionPromise
  extends Promise<EventImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventImageEdge>>() => T;
  aggregate: <T = AggregateEventImagePromise>() => T;
}

export interface EventImageConnectionSubscription
  extends Promise<AsyncIterator<EventImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventImageSubscription>() => T;
}

export interface EventImageEdge {
  node: EventImage;
  cursor: String;
}

export interface EventImageEdgePromise
  extends Promise<EventImageEdge>,
    Fragmentable {
  node: <T = EventImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventImageEdgeSubscription
  extends Promise<AsyncIterator<EventImageEdge>>,
    Fragmentable {
  node: <T = EventImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEventImage {
  count: Int;
}

export interface AggregateEventImagePromise
  extends Promise<AggregateEventImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventImageSubscription
  extends Promise<AsyncIterator<AggregateEventImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventUrlConnection {
  pageInfo: PageInfo;
  edges: EventUrlEdge[];
}

export interface EventUrlConnectionPromise
  extends Promise<EventUrlConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventUrlEdge>>() => T;
  aggregate: <T = AggregateEventUrlPromise>() => T;
}

export interface EventUrlConnectionSubscription
  extends Promise<AsyncIterator<EventUrlConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventUrlEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventUrlSubscription>() => T;
}

export interface EventUrlEdge {
  node: EventUrl;
  cursor: String;
}

export interface EventUrlEdgePromise
  extends Promise<EventUrlEdge>,
    Fragmentable {
  node: <T = EventUrlPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventUrlEdgeSubscription
  extends Promise<AsyncIterator<EventUrlEdge>>,
    Fragmentable {
  node: <T = EventUrlSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEventUrl {
  count: Int;
}

export interface AggregateEventUrlPromise
  extends Promise<AggregateEventUrl>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventUrlSubscription
  extends Promise<AsyncIterator<AggregateEventUrl>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GeoJsonConnection {
  pageInfo: PageInfo;
  edges: GeoJsonEdge[];
}

export interface GeoJsonConnectionPromise
  extends Promise<GeoJsonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GeoJsonEdge>>() => T;
  aggregate: <T = AggregateGeoJsonPromise>() => T;
}

export interface GeoJsonConnectionSubscription
  extends Promise<AsyncIterator<GeoJsonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GeoJsonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeoJsonSubscription>() => T;
}

export interface GeoJsonEdge {
  node: GeoJson;
  cursor: String;
}

export interface GeoJsonEdgePromise extends Promise<GeoJsonEdge>, Fragmentable {
  node: <T = GeoJsonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GeoJsonEdgeSubscription
  extends Promise<AsyncIterator<GeoJsonEdge>>,
    Fragmentable {
  node: <T = GeoJsonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGeoJson {
  count: Int;
}

export interface AggregateGeoJsonPromise
  extends Promise<AggregateGeoJson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeoJsonSubscription
  extends Promise<AsyncIterator<AggregateGeoJson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NeighborhoodConnection {
  pageInfo: PageInfo;
  edges: NeighborhoodEdge[];
}

export interface NeighborhoodConnectionPromise
  extends Promise<NeighborhoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NeighborhoodEdge>>() => T;
  aggregate: <T = AggregateNeighborhoodPromise>() => T;
}

export interface NeighborhoodConnectionSubscription
  extends Promise<AsyncIterator<NeighborhoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NeighborhoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNeighborhoodSubscription>() => T;
}

export interface NeighborhoodEdge {
  node: Neighborhood;
  cursor: String;
}

export interface NeighborhoodEdgePromise
  extends Promise<NeighborhoodEdge>,
    Fragmentable {
  node: <T = NeighborhoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NeighborhoodEdgeSubscription
  extends Promise<AsyncIterator<NeighborhoodEdge>>,
    Fragmentable {
  node: <T = NeighborhoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNeighborhood {
  count: Int;
}

export interface AggregateNeighborhoodPromise
  extends Promise<AggregateNeighborhood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNeighborhoodSubscription
  extends Promise<AsyncIterator<AggregateNeighborhood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
  ticketType: TicketType;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  ticketType: () => Promise<TicketType>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  ticketType: () => Promise<AsyncIterator<TicketType>>;
}

export interface EventImageSubscriptionPayload {
  mutation: MutationType;
  node: EventImage;
  updatedFields: String[];
  previousValues: EventImagePreviousValues;
}

export interface EventImageSubscriptionPayloadPromise
  extends Promise<EventImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventImagePreviousValuesPromise>() => T;
}

export interface EventImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventImagePreviousValuesSubscription>() => T;
}

export interface EventImagePreviousValues {
  id: ID_Output;
  url: String;
}

export interface EventImagePreviousValuesPromise
  extends Promise<EventImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface EventImagePreviousValuesSubscription
  extends Promise<AsyncIterator<EventImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface EventUrlSubscriptionPayload {
  mutation: MutationType;
  node: EventUrl;
  updatedFields: String[];
  previousValues: EventUrlPreviousValues;
}

export interface EventUrlSubscriptionPayloadPromise
  extends Promise<EventUrlSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventUrlPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventUrlPreviousValuesPromise>() => T;
}

export interface EventUrlSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventUrlSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventUrlSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventUrlPreviousValuesSubscription>() => T;
}

export interface EventUrlPreviousValues {
  id: ID_Output;
  url: String;
}

export interface EventUrlPreviousValuesPromise
  extends Promise<EventUrlPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface EventUrlPreviousValuesSubscription
  extends Promise<AsyncIterator<EventUrlPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface GeoJsonSubscriptionPayload {
  mutation: MutationType;
  node: GeoJson;
  updatedFields: String[];
  previousValues: GeoJsonPreviousValues;
}

export interface GeoJsonSubscriptionPayloadPromise
  extends Promise<GeoJsonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GeoJsonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GeoJsonPreviousValuesPromise>() => T;
}

export interface GeoJsonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GeoJsonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GeoJsonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GeoJsonPreviousValuesSubscription>() => T;
}

export interface GeoJsonPreviousValues {
  id: ID_Output;
  geoJson: String;
}

export interface GeoJsonPreviousValuesPromise
  extends Promise<GeoJsonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geoJson: () => Promise<String>;
}

export interface GeoJsonPreviousValuesSubscription
  extends Promise<AsyncIterator<GeoJsonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geoJson: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  name: String;
  streetAddress: String;
  streetAddress2?: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Float;
  longitude?: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  streetAddress: () => Promise<String>;
  streetAddress2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<Float>;
  longitude: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  streetAddress2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<Float>>;
  longitude: () => Promise<AsyncIterator<Float>>;
}

export interface NeighborhoodSubscriptionPayload {
  mutation: MutationType;
  node: Neighborhood;
  updatedFields: String[];
  previousValues: NeighborhoodPreviousValues;
}

export interface NeighborhoodSubscriptionPayloadPromise
  extends Promise<NeighborhoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NeighborhoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NeighborhoodPreviousValuesPromise>() => T;
}

export interface NeighborhoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NeighborhoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NeighborhoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NeighborhoodPreviousValuesSubscription>() => T;
}

export interface NeighborhoodPreviousValues {
  id: ID_Output;
}

export interface NeighborhoodPreviousValuesPromise
  extends Promise<NeighborhoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface NeighborhoodPreviousValuesSubscription
  extends Promise<AsyncIterator<NeighborhoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
  url?: String;
  phone?: String;
  email?: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  title: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  auth0Id: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  auth0Id: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  auth0Id: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "EventImage",
    embedded: false
  },
  {
    name: "EventUrl",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Neighborhood",
    embedded: false
  },
  {
    name: "GeoJson",
    embedded: false
  },
  {
    name: "TicketType",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
