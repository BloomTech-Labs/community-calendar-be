// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  event: (where?: EventWhereInput) => Promise<boolean>;
  event_Image: (where?: Event_ImageWhereInput) => Promise<boolean>;
  event_Url: (where?: Event_UrlWhereInput) => Promise<boolean>;
  geo_Json: (where?: Geo_JsonWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  neighborhood: (where?: NeighborhoodWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventImage: (
    where: Event_ImageWhereUniqueInput
  ) => Event_ImageNullablePromise;
  eventImages: (args?: {
    where?: Event_ImageWhereInput;
    orderBy?: Event_ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event_Image>;
  eventImagesConnection: (args?: {
    where?: Event_ImageWhereInput;
    orderBy?: Event_ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Event_ImageConnectionPromise;
  eventUrl: (where: Event_UrlWhereUniqueInput) => Event_UrlNullablePromise;
  eventUrls: (args?: {
    where?: Event_UrlWhereInput;
    orderBy?: Event_UrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event_Url>;
  eventUrlsConnection: (args?: {
    where?: Event_UrlWhereInput;
    orderBy?: Event_UrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Event_UrlConnectionPromise;
  geoJson: (where: Geo_JsonWhereUniqueInput) => Geo_JsonNullablePromise;
  geoJsons: (args?: {
    where?: Geo_JsonWhereInput;
    orderBy?: Geo_JsonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Geo_Json>;
  geoJsonsConnection: (args?: {
    where?: Geo_JsonWhereInput;
    orderBy?: Geo_JsonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Geo_JsonConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  neighborhood: (
    where: NeighborhoodWhereUniqueInput
  ) => NeighborhoodNullablePromise;
  neighborhoods: (args?: {
    where?: NeighborhoodWhereInput;
    orderBy?: NeighborhoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Neighborhood>;
  neighborhoodsConnection: (args?: {
    where?: NeighborhoodWhereInput;
    orderBy?: NeighborhoodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NeighborhoodConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEvent_Image: (data: Event_ImageCreateInput) => Event_ImagePromise;
  updateEvent_Image: (args: {
    data: Event_ImageUpdateInput;
    where: Event_ImageWhereUniqueInput;
  }) => Event_ImagePromise;
  updateManyEvent_Images: (args: {
    data: Event_ImageUpdateManyMutationInput;
    where?: Event_ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent_Image: (args: {
    where: Event_ImageWhereUniqueInput;
    create: Event_ImageCreateInput;
    update: Event_ImageUpdateInput;
  }) => Event_ImagePromise;
  deleteEvent_Image: (where: Event_ImageWhereUniqueInput) => Event_ImagePromise;
  deleteManyEvent_Images: (
    where?: Event_ImageWhereInput
  ) => BatchPayloadPromise;
  createEvent_Url: (data: Event_UrlCreateInput) => Event_UrlPromise;
  updateEvent_Url: (args: {
    data: Event_UrlUpdateInput;
    where: Event_UrlWhereUniqueInput;
  }) => Event_UrlPromise;
  updateManyEvent_Urls: (args: {
    data: Event_UrlUpdateManyMutationInput;
    where?: Event_UrlWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent_Url: (args: {
    where: Event_UrlWhereUniqueInput;
    create: Event_UrlCreateInput;
    update: Event_UrlUpdateInput;
  }) => Event_UrlPromise;
  deleteEvent_Url: (where: Event_UrlWhereUniqueInput) => Event_UrlPromise;
  deleteManyEvent_Urls: (where?: Event_UrlWhereInput) => BatchPayloadPromise;
  createGeo_Json: (data: Geo_JsonCreateInput) => Geo_JsonPromise;
  updateGeo_Json: (args: {
    data: Geo_JsonUpdateInput;
    where: Geo_JsonWhereUniqueInput;
  }) => Geo_JsonPromise;
  updateManyGeo_Jsons: (args: {
    data: Geo_JsonUpdateManyMutationInput;
    where?: Geo_JsonWhereInput;
  }) => BatchPayloadPromise;
  upsertGeo_Json: (args: {
    where: Geo_JsonWhereUniqueInput;
    create: Geo_JsonCreateInput;
    update: Geo_JsonUpdateInput;
  }) => Geo_JsonPromise;
  deleteGeo_Json: (where: Geo_JsonWhereUniqueInput) => Geo_JsonPromise;
  deleteManyGeo_Jsons: (where?: Geo_JsonWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createNeighborhood: (data: NeighborhoodCreateInput) => NeighborhoodPromise;
  updateNeighborhood: (args: {
    data: NeighborhoodUpdateInput;
    where: NeighborhoodWhereUniqueInput;
  }) => NeighborhoodPromise;
  upsertNeighborhood: (args: {
    where: NeighborhoodWhereUniqueInput;
    create: NeighborhoodCreateInput;
    update: NeighborhoodUpdateInput;
  }) => NeighborhoodPromise;
  deleteNeighborhood: (
    where: NeighborhoodWhereUniqueInput
  ) => NeighborhoodPromise;
  deleteManyNeighborhoods: (
    where?: NeighborhoodWhereInput
  ) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventImage: (
    where?: Event_ImageSubscriptionWhereInput
  ) => Event_ImageSubscriptionPayloadSubscription;
  eventUrl: (
    where?: Event_UrlSubscriptionWhereInput
  ) => Event_UrlSubscriptionPayloadSubscription;
  geoJson: (
    where?: Geo_JsonSubscriptionWhereInput
  ) => Geo_JsonSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  neighborhood: (
    where?: NeighborhoodSubscriptionWhereInput
  ) => NeighborhoodSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "url_ASC"
  | "url_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "auth0_id_ASC"
  | "auth0_id_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "start_ASC"
  | "start_DESC"
  | "end_ASC"
  | "end_DESC";

export type Event_ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC";

export type Event_UrlOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "street_address_ASC"
  | "street_address_DESC"
  | "street_address_2_ASC"
  | "street_address_2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC"
  | "state_ASC"
  | "state_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC";

export type Geo_JsonOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "geo_json_ASC"
  | "geo_json_DESC";

export type NeighborhoodOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  auth0_id?: Maybe<String>;
  auth0_id_not?: Maybe<String>;
  auth0_id_in?: Maybe<String[] | String>;
  auth0_id_not_in?: Maybe<String[] | String>;
  auth0_id_lt?: Maybe<String>;
  auth0_id_lte?: Maybe<String>;
  auth0_id_gt?: Maybe<String>;
  auth0_id_gte?: Maybe<String>;
  auth0_id_contains?: Maybe<String>;
  auth0_id_not_contains?: Maybe<String>;
  auth0_id_starts_with?: Maybe<String>;
  auth0_id_not_starts_with?: Maybe<String>;
  auth0_id_ends_with?: Maybe<String>;
  auth0_id_not_ends_with?: Maybe<String>;
  organizations_every?: Maybe<OrganizationWhereInput>;
  organizations_some?: Maybe<OrganizationWhereInput>;
  organizations_none?: Maybe<OrganizationWhereInput>;
  rsvps_every?: Maybe<EventWhereInput>;
  rsvps_some?: Maybe<EventWhereInput>;
  rsvps_none?: Maybe<EventWhereInput>;
  admin_for_every?: Maybe<EventWhereInput>;
  admin_for_some?: Maybe<EventWhereInput>;
  admin_for_none?: Maybe<EventWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserWhereInput>;
  event_images_every?: Maybe<Event_ImageWhereInput>;
  event_images_some?: Maybe<Event_ImageWhereInput>;
  event_images_none?: Maybe<Event_ImageWhereInput>;
  rsvps_every?: Maybe<UserWhereInput>;
  rsvps_some?: Maybe<UserWhereInput>;
  rsvps_none?: Maybe<UserWhereInput>;
  urls_every?: Maybe<Event_UrlWhereInput>;
  urls_some?: Maybe<Event_UrlWhereInput>;
  urls_none?: Maybe<Event_UrlWhereInput>;
  admins_every?: Maybe<UserWhereInput>;
  admins_some?: Maybe<UserWhereInput>;
  admins_none?: Maybe<UserWhereInput>;
  locations_every?: Maybe<LocationWhereInput>;
  locations_some?: Maybe<LocationWhereInput>;
  locations_none?: Maybe<LocationWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface Event_ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  event?: Maybe<EventWhereInput>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<Event_ImageWhereInput[] | Event_ImageWhereInput>;
  OR?: Maybe<Event_ImageWhereInput[] | Event_ImageWhereInput>;
  NOT?: Maybe<Event_ImageWhereInput[] | Event_ImageWhereInput>;
}

export interface Event_UrlWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<Event_UrlWhereInput[] | Event_UrlWhereInput>;
  OR?: Maybe<Event_UrlWhereInput[] | Event_UrlWhereInput>;
  NOT?: Maybe<Event_UrlWhereInput[] | Event_UrlWhereInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_not?: Maybe<String>;
  street_address_in?: Maybe<String[] | String>;
  street_address_not_in?: Maybe<String[] | String>;
  street_address_lt?: Maybe<String>;
  street_address_lte?: Maybe<String>;
  street_address_gt?: Maybe<String>;
  street_address_gte?: Maybe<String>;
  street_address_contains?: Maybe<String>;
  street_address_not_contains?: Maybe<String>;
  street_address_starts_with?: Maybe<String>;
  street_address_not_starts_with?: Maybe<String>;
  street_address_ends_with?: Maybe<String>;
  street_address_not_ends_with?: Maybe<String>;
  street_address_2?: Maybe<String>;
  street_address_2_not?: Maybe<String>;
  street_address_2_in?: Maybe<String[] | String>;
  street_address_2_not_in?: Maybe<String[] | String>;
  street_address_2_lt?: Maybe<String>;
  street_address_2_lte?: Maybe<String>;
  street_address_2_gt?: Maybe<String>;
  street_address_2_gte?: Maybe<String>;
  street_address_2_contains?: Maybe<String>;
  street_address_2_not_contains?: Maybe<String>;
  street_address_2_starts_with?: Maybe<String>;
  street_address_2_not_starts_with?: Maybe<String>;
  street_address_2_ends_with?: Maybe<String>;
  street_address_2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<Int>;
  zipcode_not?: Maybe<Int>;
  zipcode_in?: Maybe<Int[] | Int>;
  zipcode_not_in?: Maybe<Int[] | Int>;
  zipcode_lt?: Maybe<Int>;
  zipcode_lte?: Maybe<Int>;
  zipcode_gt?: Maybe<Int>;
  zipcode_gte?: Maybe<Int>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  neighborhood?: Maybe<NeighborhoodWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface NeighborhoodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  geo_json?: Maybe<Geo_JsonWhereInput>;
  AND?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
  OR?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
  NOT?: Maybe<NeighborhoodWhereInput[] | NeighborhoodWhereInput>;
}

export interface Geo_JsonWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  geo_json?: Maybe<String>;
  geo_json_not?: Maybe<String>;
  geo_json_in?: Maybe<String[] | String>;
  geo_json_not_in?: Maybe<String[] | String>;
  geo_json_lt?: Maybe<String>;
  geo_json_lte?: Maybe<String>;
  geo_json_gt?: Maybe<String>;
  geo_json_gte?: Maybe<String>;
  geo_json_contains?: Maybe<String>;
  geo_json_not_contains?: Maybe<String>;
  geo_json_starts_with?: Maybe<String>;
  geo_json_not_starts_with?: Maybe<String>;
  geo_json_ends_with?: Maybe<String>;
  geo_json_not_ends_with?: Maybe<String>;
  AND?: Maybe<Geo_JsonWhereInput[] | Geo_JsonWhereInput>;
  OR?: Maybe<Geo_JsonWhereInput[] | Geo_JsonWhereInput>;
  NOT?: Maybe<Geo_JsonWhereInput[] | Geo_JsonWhereInput>;
}

export type Event_ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type Event_UrlWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type Geo_JsonWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NeighborhoodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  auth0_id?: Maybe<String>;
}>;

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  event_images?: Maybe<Event_ImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  auth0_id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  admin_for?: Maybe<EventCreateManyWithoutAdminsInput>;
}

export interface OrganizationCreateManyWithoutUsersInput {
  create?: Maybe<
    OrganizationCreateWithoutUsersInput[] | OrganizationCreateWithoutUsersInput
  >;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
}

export interface OrganizationCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: String;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EventCreateManyWithoutRsvpsInput {
  create?: Maybe<EventCreateWithoutRsvpsInput[] | EventCreateWithoutRsvpsInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutRsvpsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  event_images?: Maybe<Event_ImageCreateManyWithoutEventInput>;
  urls?: Maybe<Event_UrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface Event_ImageCreateManyWithoutEventInput {
  create?: Maybe<
    Event_ImageCreateWithoutEventInput[] | Event_ImageCreateWithoutEventInput
  >;
  connect?: Maybe<Event_ImageWhereUniqueInput[] | Event_ImageWhereUniqueInput>;
}

export interface Event_ImageCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface Event_UrlCreateManyWithoutEventInput {
  create?: Maybe<
    Event_UrlCreateWithoutEventInput[] | Event_UrlCreateWithoutEventInput
  >;
  connect?: Maybe<Event_UrlWhereUniqueInput[] | Event_UrlWhereUniqueInput>;
}

export interface Event_UrlCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface UserCreateManyWithoutAdmin_forInput {
  create?: Maybe<
    UserCreateWithoutAdmin_forInput[] | UserCreateWithoutAdmin_forInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutAdmin_forInput {
  id?: Maybe<ID_Input>;
  auth0_id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
}

export interface LocationCreateManyWithoutEventInput {
  create?: Maybe<
    LocationCreateWithoutEventInput[] | LocationCreateWithoutEventInput
  >;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
}

export interface LocationCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  name: String;
  street_address: String;
  street_address_2: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  neighborhood?: Maybe<NeighborhoodCreateOneInput>;
}

export interface NeighborhoodCreateOneInput {
  create?: Maybe<NeighborhoodCreateInput>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodCreateInput {
  id?: Maybe<ID_Input>;
  geo_json: Geo_JsonCreateOneInput;
}

export interface Geo_JsonCreateOneInput {
  create?: Maybe<Geo_JsonCreateInput>;
  connect?: Maybe<Geo_JsonWhereUniqueInput>;
}

export interface Geo_JsonCreateInput {
  id?: Maybe<ID_Input>;
  geo_json: String;
}

export interface EventCreateManyWithoutAdminsInput {
  create?: Maybe<
    EventCreateWithoutAdminsInput[] | EventCreateWithoutAdminsInput
  >;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
}

export interface EventCreateWithoutAdminsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  event_images?: Maybe<Event_ImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlCreateManyWithoutEventInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface UserCreateManyWithoutRsvpsInput {
  create?: Maybe<UserCreateWithoutRsvpsInput[] | UserCreateWithoutRsvpsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRsvpsInput {
  id?: Maybe<ID_Input>;
  auth0_id: String;
  organizations?: Maybe<OrganizationCreateManyWithoutUsersInput>;
  admin_for?: Maybe<EventCreateManyWithoutAdminsInput>;
}

export interface EventUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  event_images?: Maybe<Event_ImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  auth0_id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  admin_for?: Maybe<EventUpdateManyWithoutAdminsInput>;
}

export interface OrganizationUpdateManyWithoutUsersInput {
  create?: Maybe<
    OrganizationCreateWithoutUsersInput[] | OrganizationCreateWithoutUsersInput
  >;
  delete?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  set?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  disconnect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  update?: Maybe<
    | OrganizationUpdateWithWhereUniqueWithoutUsersInput[]
    | OrganizationUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | OrganizationUpsertWithWhereUniqueWithoutUsersInput[]
    | OrganizationUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<
    OrganizationScalarWhereInput[] | OrganizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrganizationUpdateManyWithWhereNestedInput[]
    | OrganizationUpdateManyWithWhereNestedInput
  >;
}

export interface OrganizationUpdateWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput;
  data: OrganizationUpdateWithoutUsersDataInput;
}

export interface OrganizationUpdateWithoutUsersDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface OrganizationUpsertWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput;
  update: OrganizationUpdateWithoutUsersDataInput;
  create: OrganizationCreateWithoutUsersInput;
}

export interface OrganizationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  OR?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  NOT?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
}

export interface OrganizationUpdateManyWithWhereNestedInput {
  where: OrganizationScalarWhereInput;
  data: OrganizationUpdateManyDataInput;
}

export interface OrganizationUpdateManyDataInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EventUpdateManyWithoutRsvpsInput {
  create?: Maybe<EventCreateWithoutRsvpsInput[] | EventCreateWithoutRsvpsInput>;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutRsvpsInput[]
    | EventUpdateWithWhereUniqueWithoutRsvpsInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutRsvpsInput[]
    | EventUpsertWithWhereUniqueWithoutRsvpsInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutRsvpsDataInput;
}

export interface EventUpdateWithoutRsvpsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  event_images?: Maybe<Event_ImageUpdateManyWithoutEventInput>;
  urls?: Maybe<Event_UrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface Event_ImageUpdateManyWithoutEventInput {
  create?: Maybe<
    Event_ImageCreateWithoutEventInput[] | Event_ImageCreateWithoutEventInput
  >;
  delete?: Maybe<Event_ImageWhereUniqueInput[] | Event_ImageWhereUniqueInput>;
  connect?: Maybe<Event_ImageWhereUniqueInput[] | Event_ImageWhereUniqueInput>;
  set?: Maybe<Event_ImageWhereUniqueInput[] | Event_ImageWhereUniqueInput>;
  disconnect?: Maybe<
    Event_ImageWhereUniqueInput[] | Event_ImageWhereUniqueInput
  >;
  update?: Maybe<
    | Event_ImageUpdateWithWhereUniqueWithoutEventInput[]
    | Event_ImageUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | Event_ImageUpsertWithWhereUniqueWithoutEventInput[]
    | Event_ImageUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<
    Event_ImageScalarWhereInput[] | Event_ImageScalarWhereInput
  >;
  updateMany?: Maybe<
    | Event_ImageUpdateManyWithWhereNestedInput[]
    | Event_ImageUpdateManyWithWhereNestedInput
  >;
}

export interface Event_ImageUpdateWithWhereUniqueWithoutEventInput {
  where: Event_ImageWhereUniqueInput;
  data: Event_ImageUpdateWithoutEventDataInput;
}

export interface Event_ImageUpdateWithoutEventDataInput {
  url?: Maybe<String>;
}

export interface Event_ImageUpsertWithWhereUniqueWithoutEventInput {
  where: Event_ImageWhereUniqueInput;
  update: Event_ImageUpdateWithoutEventDataInput;
  create: Event_ImageCreateWithoutEventInput;
}

export interface Event_ImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<Event_ImageScalarWhereInput[] | Event_ImageScalarWhereInput>;
  OR?: Maybe<Event_ImageScalarWhereInput[] | Event_ImageScalarWhereInput>;
  NOT?: Maybe<Event_ImageScalarWhereInput[] | Event_ImageScalarWhereInput>;
}

export interface Event_ImageUpdateManyWithWhereNestedInput {
  where: Event_ImageScalarWhereInput;
  data: Event_ImageUpdateManyDataInput;
}

export interface Event_ImageUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface Event_UrlUpdateManyWithoutEventInput {
  create?: Maybe<
    Event_UrlCreateWithoutEventInput[] | Event_UrlCreateWithoutEventInput
  >;
  delete?: Maybe<Event_UrlWhereUniqueInput[] | Event_UrlWhereUniqueInput>;
  connect?: Maybe<Event_UrlWhereUniqueInput[] | Event_UrlWhereUniqueInput>;
  set?: Maybe<Event_UrlWhereUniqueInput[] | Event_UrlWhereUniqueInput>;
  disconnect?: Maybe<Event_UrlWhereUniqueInput[] | Event_UrlWhereUniqueInput>;
  update?: Maybe<
    | Event_UrlUpdateWithWhereUniqueWithoutEventInput[]
    | Event_UrlUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | Event_UrlUpsertWithWhereUniqueWithoutEventInput[]
    | Event_UrlUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<Event_UrlScalarWhereInput[] | Event_UrlScalarWhereInput>;
  updateMany?: Maybe<
    | Event_UrlUpdateManyWithWhereNestedInput[]
    | Event_UrlUpdateManyWithWhereNestedInput
  >;
}

export interface Event_UrlUpdateWithWhereUniqueWithoutEventInput {
  where: Event_UrlWhereUniqueInput;
  data: Event_UrlUpdateWithoutEventDataInput;
}

export interface Event_UrlUpdateWithoutEventDataInput {
  url?: Maybe<String>;
}

export interface Event_UrlUpsertWithWhereUniqueWithoutEventInput {
  where: Event_UrlWhereUniqueInput;
  update: Event_UrlUpdateWithoutEventDataInput;
  create: Event_UrlCreateWithoutEventInput;
}

export interface Event_UrlScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<Event_UrlScalarWhereInput[] | Event_UrlScalarWhereInput>;
  OR?: Maybe<Event_UrlScalarWhereInput[] | Event_UrlScalarWhereInput>;
  NOT?: Maybe<Event_UrlScalarWhereInput[] | Event_UrlScalarWhereInput>;
}

export interface Event_UrlUpdateManyWithWhereNestedInput {
  where: Event_UrlScalarWhereInput;
  data: Event_UrlUpdateManyDataInput;
}

export interface Event_UrlUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface UserUpdateManyWithoutAdmin_forInput {
  create?: Maybe<
    UserCreateWithoutAdmin_forInput[] | UserCreateWithoutAdmin_forInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutAdmin_forInput[]
    | UserUpdateWithWhereUniqueWithoutAdmin_forInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutAdmin_forInput[]
    | UserUpsertWithWhereUniqueWithoutAdmin_forInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutAdmin_forInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAdmin_forDataInput;
}

export interface UserUpdateWithoutAdmin_forDataInput {
  auth0_id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutAdmin_forInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAdmin_forDataInput;
  create: UserCreateWithoutAdmin_forInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  auth0_id?: Maybe<String>;
  auth0_id_not?: Maybe<String>;
  auth0_id_in?: Maybe<String[] | String>;
  auth0_id_not_in?: Maybe<String[] | String>;
  auth0_id_lt?: Maybe<String>;
  auth0_id_lte?: Maybe<String>;
  auth0_id_gt?: Maybe<String>;
  auth0_id_gte?: Maybe<String>;
  auth0_id_contains?: Maybe<String>;
  auth0_id_not_contains?: Maybe<String>;
  auth0_id_starts_with?: Maybe<String>;
  auth0_id_not_starts_with?: Maybe<String>;
  auth0_id_ends_with?: Maybe<String>;
  auth0_id_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  auth0_id?: Maybe<String>;
}

export interface LocationUpdateManyWithoutEventInput {
  create?: Maybe<
    LocationCreateWithoutEventInput[] | LocationCreateWithoutEventInput
  >;
  delete?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  connect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  set?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  disconnect?: Maybe<LocationWhereUniqueInput[] | LocationWhereUniqueInput>;
  update?: Maybe<
    | LocationUpdateWithWhereUniqueWithoutEventInput[]
    | LocationUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | LocationUpsertWithWhereUniqueWithoutEventInput[]
    | LocationUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  updateMany?: Maybe<
    | LocationUpdateManyWithWhereNestedInput[]
    | LocationUpdateManyWithWhereNestedInput
  >;
}

export interface LocationUpdateWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput;
  data: LocationUpdateWithoutEventDataInput;
}

export interface LocationUpdateWithoutEventDataInput {
  name?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  neighborhood?: Maybe<NeighborhoodUpdateOneInput>;
}

export interface NeighborhoodUpdateOneInput {
  create?: Maybe<NeighborhoodCreateInput>;
  update?: Maybe<NeighborhoodUpdateDataInput>;
  upsert?: Maybe<NeighborhoodUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<NeighborhoodWhereUniqueInput>;
}

export interface NeighborhoodUpdateDataInput {
  geo_json?: Maybe<Geo_JsonUpdateOneRequiredInput>;
}

export interface Geo_JsonUpdateOneRequiredInput {
  create?: Maybe<Geo_JsonCreateInput>;
  update?: Maybe<Geo_JsonUpdateDataInput>;
  upsert?: Maybe<Geo_JsonUpsertNestedInput>;
  connect?: Maybe<Geo_JsonWhereUniqueInput>;
}

export interface Geo_JsonUpdateDataInput {
  geo_json?: Maybe<String>;
}

export interface Geo_JsonUpsertNestedInput {
  update: Geo_JsonUpdateDataInput;
  create: Geo_JsonCreateInput;
}

export interface NeighborhoodUpsertNestedInput {
  update: NeighborhoodUpdateDataInput;
  create: NeighborhoodCreateInput;
}

export interface LocationUpsertWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput;
  update: LocationUpdateWithoutEventDataInput;
  create: LocationCreateWithoutEventInput;
}

export interface LocationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_not?: Maybe<String>;
  street_address_in?: Maybe<String[] | String>;
  street_address_not_in?: Maybe<String[] | String>;
  street_address_lt?: Maybe<String>;
  street_address_lte?: Maybe<String>;
  street_address_gt?: Maybe<String>;
  street_address_gte?: Maybe<String>;
  street_address_contains?: Maybe<String>;
  street_address_not_contains?: Maybe<String>;
  street_address_starts_with?: Maybe<String>;
  street_address_not_starts_with?: Maybe<String>;
  street_address_ends_with?: Maybe<String>;
  street_address_not_ends_with?: Maybe<String>;
  street_address_2?: Maybe<String>;
  street_address_2_not?: Maybe<String>;
  street_address_2_in?: Maybe<String[] | String>;
  street_address_2_not_in?: Maybe<String[] | String>;
  street_address_2_lt?: Maybe<String>;
  street_address_2_lte?: Maybe<String>;
  street_address_2_gt?: Maybe<String>;
  street_address_2_gte?: Maybe<String>;
  street_address_2_contains?: Maybe<String>;
  street_address_2_not_contains?: Maybe<String>;
  street_address_2_starts_with?: Maybe<String>;
  street_address_2_not_starts_with?: Maybe<String>;
  street_address_2_ends_with?: Maybe<String>;
  street_address_2_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  zipcode?: Maybe<Int>;
  zipcode_not?: Maybe<Int>;
  zipcode_in?: Maybe<Int[] | Int>;
  zipcode_not_in?: Maybe<Int[] | Int>;
  zipcode_lt?: Maybe<Int>;
  zipcode_lte?: Maybe<Int>;
  zipcode_gt?: Maybe<Int>;
  zipcode_gte?: Maybe<Int>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  latitude?: Maybe<String>;
  latitude_not?: Maybe<String>;
  latitude_in?: Maybe<String[] | String>;
  latitude_not_in?: Maybe<String[] | String>;
  latitude_lt?: Maybe<String>;
  latitude_lte?: Maybe<String>;
  latitude_gt?: Maybe<String>;
  latitude_gte?: Maybe<String>;
  latitude_contains?: Maybe<String>;
  latitude_not_contains?: Maybe<String>;
  latitude_starts_with?: Maybe<String>;
  latitude_not_starts_with?: Maybe<String>;
  latitude_ends_with?: Maybe<String>;
  latitude_not_ends_with?: Maybe<String>;
  longitude?: Maybe<String>;
  longitude_not?: Maybe<String>;
  longitude_in?: Maybe<String[] | String>;
  longitude_not_in?: Maybe<String[] | String>;
  longitude_lt?: Maybe<String>;
  longitude_lte?: Maybe<String>;
  longitude_gt?: Maybe<String>;
  longitude_gte?: Maybe<String>;
  longitude_contains?: Maybe<String>;
  longitude_not_contains?: Maybe<String>;
  longitude_starts_with?: Maybe<String>;
  longitude_not_starts_with?: Maybe<String>;
  longitude_ends_with?: Maybe<String>;
  longitude_not_ends_with?: Maybe<String>;
  AND?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  OR?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
  NOT?: Maybe<LocationScalarWhereInput[] | LocationScalarWhereInput>;
}

export interface LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput;
  data: LocationUpdateManyDataInput;
}

export interface LocationUpdateManyDataInput {
  name?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
}

export interface EventUpsertWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutRsvpsDataInput;
  create: EventCreateWithoutRsvpsInput;
}

export interface EventScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  start_not?: Maybe<DateTimeInput>;
  start_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  start_lt?: Maybe<DateTimeInput>;
  start_lte?: Maybe<DateTimeInput>;
  start_gt?: Maybe<DateTimeInput>;
  start_gte?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  end_not?: Maybe<DateTimeInput>;
  end_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  end_lt?: Maybe<DateTimeInput>;
  end_lte?: Maybe<DateTimeInput>;
  end_gt?: Maybe<DateTimeInput>;
  end_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  OR?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  NOT?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
}

export interface EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput;
  data: EventUpdateManyDataInput;
}

export interface EventUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface EventUpdateManyWithoutAdminsInput {
  create?: Maybe<
    EventCreateWithoutAdminsInput[] | EventCreateWithoutAdminsInput
  >;
  delete?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  connect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  set?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  disconnect?: Maybe<EventWhereUniqueInput[] | EventWhereUniqueInput>;
  update?: Maybe<
    | EventUpdateWithWhereUniqueWithoutAdminsInput[]
    | EventUpdateWithWhereUniqueWithoutAdminsInput
  >;
  upsert?: Maybe<
    | EventUpsertWithWhereUniqueWithoutAdminsInput[]
    | EventUpsertWithWhereUniqueWithoutAdminsInput
  >;
  deleteMany?: Maybe<EventScalarWhereInput[] | EventScalarWhereInput>;
  updateMany?: Maybe<
    EventUpdateManyWithWhereNestedInput[] | EventUpdateManyWithWhereNestedInput
  >;
}

export interface EventUpdateWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput;
  data: EventUpdateWithoutAdminsDataInput;
}

export interface EventUpdateWithoutAdminsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  event_images?: Maybe<Event_ImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlUpdateManyWithoutEventInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface UserUpdateManyWithoutRsvpsInput {
  create?: Maybe<UserCreateWithoutRsvpsInput[] | UserCreateWithoutRsvpsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRsvpsInput[]
    | UserUpdateWithWhereUniqueWithoutRsvpsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRsvpsInput[]
    | UserUpsertWithWhereUniqueWithoutRsvpsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRsvpsDataInput;
}

export interface UserUpdateWithoutRsvpsDataInput {
  auth0_id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  admin_for?: Maybe<EventUpdateManyWithoutAdminsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRsvpsDataInput;
  create: UserCreateWithoutRsvpsInput;
}

export interface EventUpsertWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput;
  update: EventUpdateWithoutAdminsDataInput;
  create: EventCreateWithoutAdminsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface EventUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
}

export interface Event_ImageCreateInput {
  id?: Maybe<ID_Input>;
  event: EventCreateOneWithoutEvent_imagesInput;
  url: String;
}

export interface EventCreateOneWithoutEvent_imagesInput {
  create?: Maybe<EventCreateWithoutEvent_imagesInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutEvent_imagesInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface Event_ImageUpdateInput {
  event?: Maybe<EventUpdateOneRequiredWithoutEvent_imagesInput>;
  url?: Maybe<String>;
}

export interface EventUpdateOneRequiredWithoutEvent_imagesInput {
  create?: Maybe<EventCreateWithoutEvent_imagesInput>;
  update?: Maybe<EventUpdateWithoutEvent_imagesDataInput>;
  upsert?: Maybe<EventUpsertWithoutEvent_imagesInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutEvent_imagesDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface EventUpsertWithoutEvent_imagesInput {
  update: EventUpdateWithoutEvent_imagesDataInput;
  create: EventCreateWithoutEvent_imagesInput;
}

export interface Event_ImageUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface Event_UrlCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  event: EventCreateOneWithoutUrlsInput;
}

export interface EventCreateOneWithoutUrlsInput {
  create?: Maybe<EventCreateWithoutUrlsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutUrlsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  event_images?: Maybe<Event_ImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  admins?: Maybe<UserCreateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationCreateManyWithoutEventInput>;
}

export interface Event_UrlUpdateInput {
  url?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutUrlsInput>;
}

export interface EventUpdateOneRequiredWithoutUrlsInput {
  create?: Maybe<EventCreateWithoutUrlsInput>;
  update?: Maybe<EventUpdateWithoutUrlsDataInput>;
  upsert?: Maybe<EventUpsertWithoutUrlsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutUrlsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  event_images?: Maybe<Event_ImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  admins?: Maybe<UserUpdateManyWithoutAdmin_forInput>;
  locations?: Maybe<LocationUpdateManyWithoutEventInput>;
}

export interface EventUpsertWithoutUrlsInput {
  update: EventUpdateWithoutUrlsDataInput;
  create: EventCreateWithoutUrlsInput;
}

export interface Event_UrlUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface Geo_JsonUpdateInput {
  geo_json?: Maybe<String>;
}

export interface Geo_JsonUpdateManyMutationInput {
  geo_json?: Maybe<String>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  street_address: String;
  street_address_2: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  event: EventCreateOneWithoutLocationsInput;
  neighborhood?: Maybe<NeighborhoodCreateOneInput>;
}

export interface EventCreateOneWithoutLocationsInput {
  create?: Maybe<EventCreateWithoutLocationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventCreateWithoutLocationsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  start: DateTimeInput;
  end: DateTimeInput;
  creator_id: UserCreateOneInput;
  event_images?: Maybe<Event_ImageCreateManyWithoutEventInput>;
  rsvps?: Maybe<UserCreateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlCreateManyWithoutEventInput>;
  admins?: Maybe<UserCreateManyWithoutAdmin_forInput>;
}

export interface LocationUpdateInput {
  name?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutLocationsInput>;
  neighborhood?: Maybe<NeighborhoodUpdateOneInput>;
}

export interface EventUpdateOneRequiredWithoutLocationsInput {
  create?: Maybe<EventCreateWithoutLocationsInput>;
  update?: Maybe<EventUpdateWithoutLocationsDataInput>;
  upsert?: Maybe<EventUpsertWithoutLocationsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventUpdateWithoutLocationsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  start?: Maybe<DateTimeInput>;
  end?: Maybe<DateTimeInput>;
  creator_id?: Maybe<UserUpdateOneRequiredInput>;
  event_images?: Maybe<Event_ImageUpdateManyWithoutEventInput>;
  rsvps?: Maybe<UserUpdateManyWithoutRsvpsInput>;
  urls?: Maybe<Event_UrlUpdateManyWithoutEventInput>;
  admins?: Maybe<UserUpdateManyWithoutAdmin_forInput>;
}

export interface EventUpsertWithoutLocationsInput {
  update: EventUpdateWithoutLocationsDataInput;
  create: EventCreateWithoutLocationsInput;
}

export interface LocationUpdateManyMutationInput {
  name?: Maybe<String>;
  street_address?: Maybe<String>;
  street_address_2?: Maybe<String>;
  city?: Maybe<String>;
  zipcode?: Maybe<Int>;
  state?: Maybe<String>;
  latitude?: Maybe<String>;
  longitude?: Maybe<String>;
}

export interface NeighborhoodUpdateInput {
  geo_json?: Maybe<Geo_JsonUpdateOneRequiredInput>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutOrganizationsInput>;
}

export interface UserCreateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrganizationsInput {
  id?: Maybe<ID_Input>;
  auth0_id: String;
  rsvps?: Maybe<EventCreateManyWithoutRsvpsInput>;
  admin_for?: Maybe<EventCreateManyWithoutAdminsInput>;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutOrganizationsInput>;
}

export interface UserUpdateManyWithoutOrganizationsInput {
  create?: Maybe<
    UserCreateWithoutOrganizationsInput[] | UserCreateWithoutOrganizationsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpdateWithWhereUniqueWithoutOrganizationsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput[]
    | UserUpsertWithWhereUniqueWithoutOrganizationsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutOrganizationsDataInput;
}

export interface UserUpdateWithoutOrganizationsDataInput {
  auth0_id?: Maybe<String>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  admin_for?: Maybe<EventUpdateManyWithoutAdminsInput>;
}

export interface UserUpsertWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutOrganizationsDataInput;
  create: UserCreateWithoutOrganizationsInput;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
  url?: Maybe<String>;
  phone?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserUpdateInput {
  auth0_id?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutUsersInput>;
  rsvps?: Maybe<EventUpdateManyWithoutRsvpsInput>;
  admin_for?: Maybe<EventUpdateManyWithoutAdminsInput>;
}

export interface UserUpdateManyMutationInput {
  auth0_id?: Maybe<String>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface Event_ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Event_ImageWhereInput>;
  AND?: Maybe<
    Event_ImageSubscriptionWhereInput[] | Event_ImageSubscriptionWhereInput
  >;
  OR?: Maybe<
    Event_ImageSubscriptionWhereInput[] | Event_ImageSubscriptionWhereInput
  >;
  NOT?: Maybe<
    Event_ImageSubscriptionWhereInput[] | Event_ImageSubscriptionWhereInput
  >;
}

export interface Event_UrlSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Event_UrlWhereInput>;
  AND?: Maybe<
    Event_UrlSubscriptionWhereInput[] | Event_UrlSubscriptionWhereInput
  >;
  OR?: Maybe<
    Event_UrlSubscriptionWhereInput[] | Event_UrlSubscriptionWhereInput
  >;
  NOT?: Maybe<
    Event_UrlSubscriptionWhereInput[] | Event_UrlSubscriptionWhereInput
  >;
}

export interface Geo_JsonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<Geo_JsonWhereInput>;
  AND?: Maybe<
    Geo_JsonSubscriptionWhereInput[] | Geo_JsonSubscriptionWhereInput
  >;
  OR?: Maybe<Geo_JsonSubscriptionWhereInput[] | Geo_JsonSubscriptionWhereInput>;
  NOT?: Maybe<
    Geo_JsonSubscriptionWhereInput[] | Geo_JsonSubscriptionWhereInput
  >;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface NeighborhoodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NeighborhoodWhereInput>;
  AND?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
  OR?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NeighborhoodSubscriptionWhereInput[] | NeighborhoodSubscriptionWhereInput
  >;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Event {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  creator_id: <T = UserPromise>() => T;
  event_images: <T = FragmentableArray<Event_Image>>(args?: {
    where?: Event_ImageWhereInput;
    orderBy?: Event_ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = FragmentableArray<Event_Url>>(args?: {
    where?: Event_UrlWhereInput;
    orderBy?: Event_UrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator_id: <T = UserSubscription>() => T;
  event_images: <T = Promise<AsyncIterator<Event_ImageSubscription>>>(args?: {
    where?: Event_ImageWhereInput;
    orderBy?: Event_ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = Promise<AsyncIterator<Event_UrlSubscription>>>(args?: {
    where?: Event_UrlWhereInput;
    orderBy?: Event_UrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = Promise<AsyncIterator<LocationSubscription>>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
  creator_id: <T = UserPromise>() => T;
  event_images: <T = FragmentableArray<Event_Image>>(args?: {
    where?: Event_ImageWhereInput;
    orderBy?: Event_ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  urls: <T = FragmentableArray<Event_Url>>(args?: {
    where?: Event_UrlWhereInput;
    orderBy?: Event_UrlOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admins: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  locations: <T = FragmentableArray<Location>>(args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  auth0_id: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  auth0_id: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admin_for: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth0_id: () => Promise<AsyncIterator<String>>;
  organizations: <T = Promise<AsyncIterator<OrganizationSubscription>>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admin_for: <T = Promise<AsyncIterator<EventSubscription>>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth0_id: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rsvps: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  admin_for: <T = FragmentableArray<Event>>(args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Organization {
  id: ID_Output;
  name: String;
  url?: String;
  phone?: String;
  email?: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Event_Image {
  id: ID_Output;
  url: String;
}

export interface Event_ImagePromise extends Promise<Event_Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
  url: () => Promise<String>;
}

export interface Event_ImageSubscription
  extends Promise<AsyncIterator<Event_Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  event: <T = EventSubscription>() => T;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Event_ImageNullablePromise
  extends Promise<Event_Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
  url: () => Promise<String>;
}

export interface Event_Url {
  id: ID_Output;
  url: String;
}

export interface Event_UrlPromise extends Promise<Event_Url>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface Event_UrlSubscription
  extends Promise<AsyncIterator<Event_Url>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  event: <T = EventSubscription>() => T;
}

export interface Event_UrlNullablePromise
  extends Promise<Event_Url | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  event: <T = EventPromise>() => T;
}

export interface Location {
  id: ID_Output;
  name: String;
  street_address: String;
  street_address_2: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: String;
  longitude?: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  street_address: () => Promise<String>;
  street_address_2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  event: <T = EventPromise>() => T;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  street_address: () => Promise<AsyncIterator<String>>;
  street_address_2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  event: <T = EventSubscription>() => T;
  neighborhood: <T = NeighborhoodSubscription>() => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  street_address: () => Promise<String>;
  street_address_2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  event: <T = EventPromise>() => T;
  neighborhood: <T = NeighborhoodPromise>() => T;
}

export interface Neighborhood {
  id: ID_Output;
}

export interface NeighborhoodPromise
  extends Promise<Neighborhood>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geo_json: <T = Geo_JsonPromise>() => T;
}

export interface NeighborhoodSubscription
  extends Promise<AsyncIterator<Neighborhood>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geo_json: <T = Geo_JsonSubscription>() => T;
}

export interface NeighborhoodNullablePromise
  extends Promise<Neighborhood | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geo_json: <T = Geo_JsonPromise>() => T;
}

export interface Geo_Json {
  id: ID_Output;
  geo_json: String;
}

export interface Geo_JsonPromise extends Promise<Geo_Json>, Fragmentable {
  id: () => Promise<ID_Output>;
  geo_json: () => Promise<String>;
}

export interface Geo_JsonSubscription
  extends Promise<AsyncIterator<Geo_Json>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geo_json: () => Promise<AsyncIterator<String>>;
}

export interface Geo_JsonNullablePromise
  extends Promise<Geo_Json | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geo_json: () => Promise<String>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event_ImageConnection {
  pageInfo: PageInfo;
  edges: Event_ImageEdge[];
}

export interface Event_ImageConnectionPromise
  extends Promise<Event_ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Event_ImageEdge>>() => T;
  aggregate: <T = AggregateEvent_ImagePromise>() => T;
}

export interface Event_ImageConnectionSubscription
  extends Promise<AsyncIterator<Event_ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Event_ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEvent_ImageSubscription>() => T;
}

export interface Event_ImageEdge {
  node: Event_Image;
  cursor: String;
}

export interface Event_ImageEdgePromise
  extends Promise<Event_ImageEdge>,
    Fragmentable {
  node: <T = Event_ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface Event_ImageEdgeSubscription
  extends Promise<AsyncIterator<Event_ImageEdge>>,
    Fragmentable {
  node: <T = Event_ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent_Image {
  count: Int;
}

export interface AggregateEvent_ImagePromise
  extends Promise<AggregateEvent_Image>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEvent_ImageSubscription
  extends Promise<AsyncIterator<AggregateEvent_Image>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Event_UrlConnection {
  pageInfo: PageInfo;
  edges: Event_UrlEdge[];
}

export interface Event_UrlConnectionPromise
  extends Promise<Event_UrlConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Event_UrlEdge>>() => T;
  aggregate: <T = AggregateEvent_UrlPromise>() => T;
}

export interface Event_UrlConnectionSubscription
  extends Promise<AsyncIterator<Event_UrlConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Event_UrlEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEvent_UrlSubscription>() => T;
}

export interface Event_UrlEdge {
  node: Event_Url;
  cursor: String;
}

export interface Event_UrlEdgePromise
  extends Promise<Event_UrlEdge>,
    Fragmentable {
  node: <T = Event_UrlPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Event_UrlEdgeSubscription
  extends Promise<AsyncIterator<Event_UrlEdge>>,
    Fragmentable {
  node: <T = Event_UrlSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent_Url {
  count: Int;
}

export interface AggregateEvent_UrlPromise
  extends Promise<AggregateEvent_Url>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEvent_UrlSubscription
  extends Promise<AsyncIterator<AggregateEvent_Url>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Geo_JsonConnection {
  pageInfo: PageInfo;
  edges: Geo_JsonEdge[];
}

export interface Geo_JsonConnectionPromise
  extends Promise<Geo_JsonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<Geo_JsonEdge>>() => T;
  aggregate: <T = AggregateGeo_JsonPromise>() => T;
}

export interface Geo_JsonConnectionSubscription
  extends Promise<AsyncIterator<Geo_JsonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Geo_JsonEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGeo_JsonSubscription>() => T;
}

export interface Geo_JsonEdge {
  node: Geo_Json;
  cursor: String;
}

export interface Geo_JsonEdgePromise
  extends Promise<Geo_JsonEdge>,
    Fragmentable {
  node: <T = Geo_JsonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface Geo_JsonEdgeSubscription
  extends Promise<AsyncIterator<Geo_JsonEdge>>,
    Fragmentable {
  node: <T = Geo_JsonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGeo_Json {
  count: Int;
}

export interface AggregateGeo_JsonPromise
  extends Promise<AggregateGeo_Json>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGeo_JsonSubscription
  extends Promise<AsyncIterator<AggregateGeo_Json>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NeighborhoodConnection {
  pageInfo: PageInfo;
  edges: NeighborhoodEdge[];
}

export interface NeighborhoodConnectionPromise
  extends Promise<NeighborhoodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NeighborhoodEdge>>() => T;
  aggregate: <T = AggregateNeighborhoodPromise>() => T;
}

export interface NeighborhoodConnectionSubscription
  extends Promise<AsyncIterator<NeighborhoodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NeighborhoodEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNeighborhoodSubscription>() => T;
}

export interface NeighborhoodEdge {
  node: Neighborhood;
  cursor: String;
}

export interface NeighborhoodEdgePromise
  extends Promise<NeighborhoodEdge>,
    Fragmentable {
  node: <T = NeighborhoodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NeighborhoodEdgeSubscription
  extends Promise<AsyncIterator<NeighborhoodEdge>>,
    Fragmentable {
  node: <T = NeighborhoodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNeighborhood {
  count: Int;
}

export interface AggregateNeighborhoodPromise
  extends Promise<AggregateNeighborhood>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNeighborhoodSubscription
  extends Promise<AsyncIterator<AggregateNeighborhood>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  start: DateTimeOutput;
  end: DateTimeOutput;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  start: () => Promise<DateTimeOutput>;
  end: () => Promise<DateTimeOutput>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  start: () => Promise<AsyncIterator<DateTimeOutput>>;
  end: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Event_ImageSubscriptionPayload {
  mutation: MutationType;
  node: Event_Image;
  updatedFields: String[];
  previousValues: Event_ImagePreviousValues;
}

export interface Event_ImageSubscriptionPayloadPromise
  extends Promise<Event_ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Event_ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Event_ImagePreviousValuesPromise>() => T;
}

export interface Event_ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Event_ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Event_ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Event_ImagePreviousValuesSubscription>() => T;
}

export interface Event_ImagePreviousValues {
  id: ID_Output;
  url: String;
}

export interface Event_ImagePreviousValuesPromise
  extends Promise<Event_ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface Event_ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<Event_ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Event_UrlSubscriptionPayload {
  mutation: MutationType;
  node: Event_Url;
  updatedFields: String[];
  previousValues: Event_UrlPreviousValues;
}

export interface Event_UrlSubscriptionPayloadPromise
  extends Promise<Event_UrlSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Event_UrlPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Event_UrlPreviousValuesPromise>() => T;
}

export interface Event_UrlSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Event_UrlSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Event_UrlSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Event_UrlPreviousValuesSubscription>() => T;
}

export interface Event_UrlPreviousValues {
  id: ID_Output;
  url: String;
}

export interface Event_UrlPreviousValuesPromise
  extends Promise<Event_UrlPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface Event_UrlPreviousValuesSubscription
  extends Promise<AsyncIterator<Event_UrlPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface Geo_JsonSubscriptionPayload {
  mutation: MutationType;
  node: Geo_Json;
  updatedFields: String[];
  previousValues: Geo_JsonPreviousValues;
}

export interface Geo_JsonSubscriptionPayloadPromise
  extends Promise<Geo_JsonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Geo_JsonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = Geo_JsonPreviousValuesPromise>() => T;
}

export interface Geo_JsonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<Geo_JsonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = Geo_JsonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = Geo_JsonPreviousValuesSubscription>() => T;
}

export interface Geo_JsonPreviousValues {
  id: ID_Output;
  geo_json: String;
}

export interface Geo_JsonPreviousValuesPromise
  extends Promise<Geo_JsonPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  geo_json: () => Promise<String>;
}

export interface Geo_JsonPreviousValuesSubscription
  extends Promise<AsyncIterator<Geo_JsonPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  geo_json: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  name: String;
  street_address: String;
  street_address_2: String;
  city: String;
  zipcode: Int;
  state: String;
  latitude?: String;
  longitude?: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  street_address: () => Promise<String>;
  street_address_2: () => Promise<String>;
  city: () => Promise<String>;
  zipcode: () => Promise<Int>;
  state: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  street_address: () => Promise<AsyncIterator<String>>;
  street_address_2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
}

export interface NeighborhoodSubscriptionPayload {
  mutation: MutationType;
  node: Neighborhood;
  updatedFields: String[];
  previousValues: NeighborhoodPreviousValues;
}

export interface NeighborhoodSubscriptionPayloadPromise
  extends Promise<NeighborhoodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NeighborhoodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NeighborhoodPreviousValuesPromise>() => T;
}

export interface NeighborhoodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NeighborhoodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NeighborhoodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NeighborhoodPreviousValuesSubscription>() => T;
}

export interface NeighborhoodPreviousValues {
  id: ID_Output;
}

export interface NeighborhoodPreviousValuesPromise
  extends Promise<NeighborhoodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface NeighborhoodPreviousValuesSubscription
  extends Promise<AsyncIterator<NeighborhoodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
  url?: String;
  phone?: String;
  email?: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  url: () => Promise<String>;
  phone: () => Promise<String>;
  email: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  auth0_id: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  auth0_id: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  auth0_id: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Event_Image",
    embedded: false
  },
  {
    name: "Event_Url",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Neighborhood",
    embedded: false
  },
  {
    name: "Geo_Json",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
