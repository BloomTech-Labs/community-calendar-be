type AggregateEvent {
  count: Int!
}

type AggregateEvent_Image {
  count: Int!
}

type AggregateEvent_Url {
  count: Int!
}

type AggregateGeo_Json {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateNeighborhood {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Event {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: User
  event_images(where: Event_ImageWhereInput, orderBy: Event_ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Image!]
  rsvps(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  urls(where: Event_UrlWhereInput, orderBy: Event_UrlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Url!]
  admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type Event_Image {
  id: ID!
  event: Event!
  url: String!
}

type Event_ImageConnection {
  pageInfo: PageInfo!
  edges: [Event_ImageEdge]!
  aggregate: AggregateEvent_Image!
}

input Event_ImageCreateInput {
  id: ID
  event: EventCreateOneWithoutEvent_imagesInput!
  url: String!
}

input Event_ImageCreateManyWithoutEventInput {
  create: [Event_ImageCreateWithoutEventInput!]
  connect: [Event_ImageWhereUniqueInput!]
}

input Event_ImageCreateWithoutEventInput {
  id: ID
  url: String!
}

type Event_ImageEdge {
  node: Event_Image!
  cursor: String!
}

enum Event_ImageOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
}

type Event_ImagePreviousValues {
  id: ID!
  url: String!
}

input Event_ImageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [Event_ImageScalarWhereInput!]
  OR: [Event_ImageScalarWhereInput!]
  NOT: [Event_ImageScalarWhereInput!]
}

type Event_ImageSubscriptionPayload {
  mutation: MutationType!
  node: Event_Image
  updatedFields: [String!]
  previousValues: Event_ImagePreviousValues
}

input Event_ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Event_ImageWhereInput
  AND: [Event_ImageSubscriptionWhereInput!]
  OR: [Event_ImageSubscriptionWhereInput!]
  NOT: [Event_ImageSubscriptionWhereInput!]
}

input Event_ImageUpdateInput {
  event: EventUpdateOneRequiredWithoutEvent_imagesInput
  url: String
}

input Event_ImageUpdateManyDataInput {
  url: String
}

input Event_ImageUpdateManyMutationInput {
  url: String
}

input Event_ImageUpdateManyWithoutEventInput {
  create: [Event_ImageCreateWithoutEventInput!]
  delete: [Event_ImageWhereUniqueInput!]
  connect: [Event_ImageWhereUniqueInput!]
  set: [Event_ImageWhereUniqueInput!]
  disconnect: [Event_ImageWhereUniqueInput!]
  update: [Event_ImageUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [Event_ImageUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [Event_ImageScalarWhereInput!]
  updateMany: [Event_ImageUpdateManyWithWhereNestedInput!]
}

input Event_ImageUpdateManyWithWhereNestedInput {
  where: Event_ImageScalarWhereInput!
  data: Event_ImageUpdateManyDataInput!
}

input Event_ImageUpdateWithoutEventDataInput {
  url: String
}

input Event_ImageUpdateWithWhereUniqueWithoutEventInput {
  where: Event_ImageWhereUniqueInput!
  data: Event_ImageUpdateWithoutEventDataInput!
}

input Event_ImageUpsertWithWhereUniqueWithoutEventInput {
  where: Event_ImageWhereUniqueInput!
  update: Event_ImageUpdateWithoutEventDataInput!
  create: Event_ImageCreateWithoutEventInput!
}

input Event_ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  event: EventWhereInput
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [Event_ImageWhereInput!]
  OR: [Event_ImageWhereInput!]
  NOT: [Event_ImageWhereInput!]
}

input Event_ImageWhereUniqueInput {
  id: ID
}

type Event_Url {
  id: ID!
  url: String!
  event: Event!
}

type Event_UrlConnection {
  pageInfo: PageInfo!
  edges: [Event_UrlEdge]!
  aggregate: AggregateEvent_Url!
}

input Event_UrlCreateInput {
  id: ID
  url: String!
  event: EventCreateOneWithoutUrlsInput!
}

input Event_UrlCreateManyWithoutEventInput {
  create: [Event_UrlCreateWithoutEventInput!]
  connect: [Event_UrlWhereUniqueInput!]
}

input Event_UrlCreateWithoutEventInput {
  id: ID
  url: String!
}

type Event_UrlEdge {
  node: Event_Url!
  cursor: String!
}

enum Event_UrlOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
}

type Event_UrlPreviousValues {
  id: ID!
  url: String!
}

input Event_UrlScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [Event_UrlScalarWhereInput!]
  OR: [Event_UrlScalarWhereInput!]
  NOT: [Event_UrlScalarWhereInput!]
}

type Event_UrlSubscriptionPayload {
  mutation: MutationType!
  node: Event_Url
  updatedFields: [String!]
  previousValues: Event_UrlPreviousValues
}

input Event_UrlSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Event_UrlWhereInput
  AND: [Event_UrlSubscriptionWhereInput!]
  OR: [Event_UrlSubscriptionWhereInput!]
  NOT: [Event_UrlSubscriptionWhereInput!]
}

input Event_UrlUpdateInput {
  url: String
  event: EventUpdateOneRequiredWithoutUrlsInput
}

input Event_UrlUpdateManyDataInput {
  url: String
}

input Event_UrlUpdateManyMutationInput {
  url: String
}

input Event_UrlUpdateManyWithoutEventInput {
  create: [Event_UrlCreateWithoutEventInput!]
  delete: [Event_UrlWhereUniqueInput!]
  connect: [Event_UrlWhereUniqueInput!]
  set: [Event_UrlWhereUniqueInput!]
  disconnect: [Event_UrlWhereUniqueInput!]
  update: [Event_UrlUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [Event_UrlUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [Event_UrlScalarWhereInput!]
  updateMany: [Event_UrlUpdateManyWithWhereNestedInput!]
}

input Event_UrlUpdateManyWithWhereNestedInput {
  where: Event_UrlScalarWhereInput!
  data: Event_UrlUpdateManyDataInput!
}

input Event_UrlUpdateWithoutEventDataInput {
  url: String
}

input Event_UrlUpdateWithWhereUniqueWithoutEventInput {
  where: Event_UrlWhereUniqueInput!
  data: Event_UrlUpdateWithoutEventDataInput!
}

input Event_UrlUpsertWithWhereUniqueWithoutEventInput {
  where: Event_UrlWhereUniqueInput!
  update: Event_UrlUpdateWithoutEventDataInput!
  create: Event_UrlCreateWithoutEventInput!
}

input Event_UrlWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  event: EventWhereInput
  AND: [Event_UrlWhereInput!]
  OR: [Event_UrlWhereInput!]
  NOT: [Event_UrlWhereInput!]
}

input Event_UrlWhereUniqueInput {
  id: ID
}

type EventConnection {
  pageInfo: PageInfo!
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateManyWithoutAdminsInput {
  create: [EventCreateWithoutAdminsInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutRsvpsInput {
  create: [EventCreateWithoutRsvpsInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutTagsInput {
  create: [EventCreateWithoutTagsInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneWithoutEvent_imagesInput {
  create: EventCreateWithoutEvent_imagesInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutLocationsInput {
  create: EventCreateWithoutLocationsInput
  connect: EventWhereUniqueInput
}

input EventCreateOneWithoutUrlsInput {
  create: EventCreateWithoutUrlsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutAdminsInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateWithoutCreatorInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateWithoutEvent_imagesInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateWithoutLocationsInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateWithoutRsvpsInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

input EventCreateWithoutTagsInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
}

input EventCreateWithoutUrlsInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
  creator: UserCreateOneWithoutCreated_eventsInput
  event_images: Event_ImageCreateManyWithoutEventInput
  rsvps: UserCreateManyWithoutRsvpsInput
  admins: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: TagCreateManyWithoutEventsInput
}

type EventEdge {
  node: Event!
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  ticketType_ASC
  ticketType_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  ticketType: TicketType!
}

input EventScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  ticketType: TicketType
  ticketType_not: TicketType
  ticketType_in: [TicketType!]
  ticketType_not_in: [TicketType!]
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EventWhereInput
  AND: [EventSubscriptionWhereInput!]
  OR: [EventSubscriptionWhereInput!]
  NOT: [EventSubscriptionWhereInput!]
}

input EventUpdateInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateManyDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
}

input EventUpdateManyMutationInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
}

input EventUpdateManyWithoutAdminsInput {
  create: [EventCreateWithoutAdminsInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutAdminsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutAdminsInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithoutCreatorInput {
  create: [EventCreateWithoutCreatorInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithoutRsvpsInput {
  create: [EventCreateWithoutRsvpsInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutRsvpsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutRsvpsInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithoutTagsInput {
  create: [EventCreateWithoutTagsInput!]
  delete: [EventWhereUniqueInput!]
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [EventScalarWhereInput!]
  updateMany: [EventUpdateManyWithWhereNestedInput!]
}

input EventUpdateManyWithWhereNestedInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyDataInput!
}

input EventUpdateOneRequiredWithoutEvent_imagesInput {
  create: EventCreateWithoutEvent_imagesInput
  update: EventUpdateWithoutEvent_imagesDataInput
  upsert: EventUpsertWithoutEvent_imagesInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneRequiredWithoutLocationsInput {
  create: EventCreateWithoutLocationsInput
  update: EventUpdateWithoutLocationsDataInput
  upsert: EventUpsertWithoutLocationsInput
  connect: EventWhereUniqueInput
}

input EventUpdateOneRequiredWithoutUrlsInput {
  create: EventCreateWithoutUrlsInput
  update: EventUpdateWithoutUrlsDataInput
  upsert: EventUpsertWithoutUrlsInput
  connect: EventWhereUniqueInput
}

input EventUpdateWithoutAdminsDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithoutCreatorDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithoutEvent_imagesDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithoutLocationsDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithoutRsvpsDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithoutTagsDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
}

input EventUpdateWithoutUrlsDataInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  ticketType: TicketType
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: TagUpdateManyWithoutEventsInput
}

input EventUpdateWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutAdminsDataInput!
}

input EventUpdateWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCreatorDataInput!
}

input EventUpdateWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutRsvpsDataInput!
}

input EventUpdateWithWhereUniqueWithoutTagsInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutTagsDataInput!
}

input EventUpsertWithoutEvent_imagesInput {
  update: EventUpdateWithoutEvent_imagesDataInput!
  create: EventCreateWithoutEvent_imagesInput!
}

input EventUpsertWithoutLocationsInput {
  update: EventUpdateWithoutLocationsDataInput!
  create: EventCreateWithoutLocationsInput!
}

input EventUpsertWithoutUrlsInput {
  update: EventUpdateWithoutUrlsDataInput!
  create: EventCreateWithoutUrlsInput!
}

input EventUpsertWithWhereUniqueWithoutAdminsInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutAdminsDataInput!
  create: EventCreateWithoutAdminsInput!
}

input EventUpsertWithWhereUniqueWithoutCreatorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCreatorDataInput!
  create: EventCreateWithoutCreatorInput!
}

input EventUpsertWithWhereUniqueWithoutRsvpsInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutRsvpsDataInput!
  create: EventCreateWithoutRsvpsInput!
}

input EventUpsertWithWhereUniqueWithoutTagsInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutTagsDataInput!
  create: EventCreateWithoutTagsInput!
}

input EventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  start: DateTime
  start_not: DateTime
  start_in: [DateTime!]
  start_not_in: [DateTime!]
  start_lt: DateTime
  start_lte: DateTime
  start_gt: DateTime
  start_gte: DateTime
  end: DateTime
  end_not: DateTime
  end_in: [DateTime!]
  end_not_in: [DateTime!]
  end_lt: DateTime
  end_lte: DateTime
  end_gt: DateTime
  end_gte: DateTime
  ticketType: TicketType
  ticketType_not: TicketType
  ticketType_in: [TicketType!]
  ticketType_not_in: [TicketType!]
  creator: UserWhereInput
  event_images_every: Event_ImageWhereInput
  event_images_some: Event_ImageWhereInput
  event_images_none: Event_ImageWhereInput
  rsvps_every: UserWhereInput
  rsvps_some: UserWhereInput
  rsvps_none: UserWhereInput
  urls_every: Event_UrlWhereInput
  urls_some: Event_UrlWhereInput
  urls_none: Event_UrlWhereInput
  admins_every: UserWhereInput
  admins_some: UserWhereInput
  admins_none: UserWhereInput
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
}

input EventWhereUniqueInput {
  id: ID
}

type Geo_Json {
  id: ID!
  geo_json: String!
  neighborhood: Neighborhood!
}

type Geo_JsonConnection {
  pageInfo: PageInfo!
  edges: [Geo_JsonEdge]!
  aggregate: AggregateGeo_Json!
}

input Geo_JsonCreateInput {
  id: ID
  geo_json: String!
  neighborhood: NeighborhoodCreateOneWithoutGeo_jsonInput!
}

input Geo_JsonCreateOneWithoutNeighborhoodInput {
  create: Geo_JsonCreateWithoutNeighborhoodInput
  connect: Geo_JsonWhereUniqueInput
}

input Geo_JsonCreateWithoutNeighborhoodInput {
  id: ID
  geo_json: String!
}

type Geo_JsonEdge {
  node: Geo_Json!
  cursor: String!
}

enum Geo_JsonOrderByInput {
  id_ASC
  id_DESC
  geo_json_ASC
  geo_json_DESC
}

type Geo_JsonPreviousValues {
  id: ID!
  geo_json: String!
}

type Geo_JsonSubscriptionPayload {
  mutation: MutationType!
  node: Geo_Json
  updatedFields: [String!]
  previousValues: Geo_JsonPreviousValues
}

input Geo_JsonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Geo_JsonWhereInput
  AND: [Geo_JsonSubscriptionWhereInput!]
  OR: [Geo_JsonSubscriptionWhereInput!]
  NOT: [Geo_JsonSubscriptionWhereInput!]
}

input Geo_JsonUpdateInput {
  geo_json: String
  neighborhood: NeighborhoodUpdateOneRequiredWithoutGeo_jsonInput
}

input Geo_JsonUpdateManyMutationInput {
  geo_json: String
}

input Geo_JsonUpdateOneRequiredWithoutNeighborhoodInput {
  create: Geo_JsonCreateWithoutNeighborhoodInput
  update: Geo_JsonUpdateWithoutNeighborhoodDataInput
  upsert: Geo_JsonUpsertWithoutNeighborhoodInput
  connect: Geo_JsonWhereUniqueInput
}

input Geo_JsonUpdateWithoutNeighborhoodDataInput {
  geo_json: String
}

input Geo_JsonUpsertWithoutNeighborhoodInput {
  update: Geo_JsonUpdateWithoutNeighborhoodDataInput!
  create: Geo_JsonCreateWithoutNeighborhoodInput!
}

input Geo_JsonWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  geo_json: String
  geo_json_not: String
  geo_json_in: [String!]
  geo_json_not_in: [String!]
  geo_json_lt: String
  geo_json_lte: String
  geo_json_gt: String
  geo_json_gte: String
  geo_json_contains: String
  geo_json_not_contains: String
  geo_json_starts_with: String
  geo_json_not_starts_with: String
  geo_json_ends_with: String
  geo_json_not_ends_with: String
  neighborhood: NeighborhoodWhereInput
  AND: [Geo_JsonWhereInput!]
  OR: [Geo_JsonWhereInput!]
  NOT: [Geo_JsonWhereInput!]
}

input Geo_JsonWhereUniqueInput {
  id: ID
}

type Location {
  id: ID!
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
  event: Event!
  neighborhood: Neighborhood
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
  event: EventCreateOneWithoutLocationsInput!
  neighborhood: NeighborhoodCreateOneWithoutLocationsInput
}

input LocationCreateManyWithoutEventInput {
  create: [LocationCreateWithoutEventInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateManyWithoutNeighborhoodInput {
  create: [LocationCreateWithoutNeighborhoodInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateWithoutEventInput {
  id: ID
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
  neighborhood: NeighborhoodCreateOneWithoutLocationsInput
}

input LocationCreateWithoutNeighborhoodInput {
  id: ID
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
  event: EventCreateOneWithoutLocationsInput!
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  street_address_ASC
  street_address_DESC
  street_address_2_ASC
  street_address_2_DESC
  city_ASC
  city_DESC
  zipcode_ASC
  zipcode_DESC
  state_ASC
  state_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
}

type LocationPreviousValues {
  id: ID!
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
}

input LocationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  street_address: String
  street_address_not: String
  street_address_in: [String!]
  street_address_not_in: [String!]
  street_address_lt: String
  street_address_lte: String
  street_address_gt: String
  street_address_gte: String
  street_address_contains: String
  street_address_not_contains: String
  street_address_starts_with: String
  street_address_not_starts_with: String
  street_address_ends_with: String
  street_address_not_ends_with: String
  street_address_2: String
  street_address_2_not: String
  street_address_2_in: [String!]
  street_address_2_not_in: [String!]
  street_address_2_lt: String
  street_address_2_lte: String
  street_address_2_gt: String
  street_address_2_gte: String
  street_address_2_contains: String
  street_address_2_not_contains: String
  street_address_2_starts_with: String
  street_address_2_not_starts_with: String
  street_address_2_ends_with: String
  street_address_2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  AND: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  NOT: [LocationScalarWhereInput!]
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

input LocationUpdateInput {
  name: String
  street_address: String
  street_address_2: String
  city: String
  zipcode: Int
  state: String
  latitude: Float
  longitude: Float
  event: EventUpdateOneRequiredWithoutLocationsInput
  neighborhood: NeighborhoodUpdateOneWithoutLocationsInput
}

input LocationUpdateManyDataInput {
  name: String
  street_address: String
  street_address_2: String
  city: String
  zipcode: Int
  state: String
  latitude: Float
  longitude: Float
}

input LocationUpdateManyMutationInput {
  name: String
  street_address: String
  street_address_2: String
  city: String
  zipcode: Int
  state: String
  latitude: Float
  longitude: Float
}

input LocationUpdateManyWithoutEventInput {
  create: [LocationCreateWithoutEventInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutEventInput!]
  deleteMany: [LocationScalarWhereInput!]
  updateMany: [LocationUpdateManyWithWhereNestedInput!]
}

input LocationUpdateManyWithoutNeighborhoodInput {
  create: [LocationCreateWithoutNeighborhoodInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutNeighborhoodInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutNeighborhoodInput!]
  deleteMany: [LocationScalarWhereInput!]
  updateMany: [LocationUpdateManyWithWhereNestedInput!]
}

input LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput!
  data: LocationUpdateManyDataInput!
}

input LocationUpdateWithoutEventDataInput {
  name: String
  street_address: String
  street_address_2: String
  city: String
  zipcode: Int
  state: String
  latitude: Float
  longitude: Float
  neighborhood: NeighborhoodUpdateOneWithoutLocationsInput
}

input LocationUpdateWithoutNeighborhoodDataInput {
  name: String
  street_address: String
  street_address_2: String
  city: String
  zipcode: Int
  state: String
  latitude: Float
  longitude: Float
  event: EventUpdateOneRequiredWithoutLocationsInput
}

input LocationUpdateWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutEventDataInput!
}

input LocationUpdateWithWhereUniqueWithoutNeighborhoodInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutNeighborhoodDataInput!
}

input LocationUpsertWithWhereUniqueWithoutEventInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutEventDataInput!
  create: LocationCreateWithoutEventInput!
}

input LocationUpsertWithWhereUniqueWithoutNeighborhoodInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutNeighborhoodDataInput!
  create: LocationCreateWithoutNeighborhoodInput!
}

input LocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  street_address: String
  street_address_not: String
  street_address_in: [String!]
  street_address_not_in: [String!]
  street_address_lt: String
  street_address_lte: String
  street_address_gt: String
  street_address_gte: String
  street_address_contains: String
  street_address_not_contains: String
  street_address_starts_with: String
  street_address_not_starts_with: String
  street_address_ends_with: String
  street_address_not_ends_with: String
  street_address_2: String
  street_address_2_not: String
  street_address_2_in: [String!]
  street_address_2_not_in: [String!]
  street_address_2_lt: String
  street_address_2_lte: String
  street_address_2_gt: String
  street_address_2_gte: String
  street_address_2_contains: String
  street_address_2_not_contains: String
  street_address_2_starts_with: String
  street_address_2_not_starts_with: String
  street_address_2_ends_with: String
  street_address_2_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  zipcode: Int
  zipcode_not: Int
  zipcode_in: [Int!]
  zipcode_not_in: [Int!]
  zipcode_lt: Int
  zipcode_lte: Int
  zipcode_gt: Int
  zipcode_gte: Int
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  event: EventWhereInput
  neighborhood: NeighborhoodWhereInput
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEvent(data: EventCreateInput!): Event!
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateManyEvents(data: EventUpdateManyMutationInput!, where: EventWhereInput): BatchPayload!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  createEvent_Image(data: Event_ImageCreateInput!): Event_Image!
  updateEvent_Image(data: Event_ImageUpdateInput!, where: Event_ImageWhereUniqueInput!): Event_Image
  updateManyEvent_Images(data: Event_ImageUpdateManyMutationInput!, where: Event_ImageWhereInput): BatchPayload!
  upsertEvent_Image(where: Event_ImageWhereUniqueInput!, create: Event_ImageCreateInput!, update: Event_ImageUpdateInput!): Event_Image!
  deleteEvent_Image(where: Event_ImageWhereUniqueInput!): Event_Image
  deleteManyEvent_Images(where: Event_ImageWhereInput): BatchPayload!
  createEvent_Url(data: Event_UrlCreateInput!): Event_Url!
  updateEvent_Url(data: Event_UrlUpdateInput!, where: Event_UrlWhereUniqueInput!): Event_Url
  updateManyEvent_Urls(data: Event_UrlUpdateManyMutationInput!, where: Event_UrlWhereInput): BatchPayload!
  upsertEvent_Url(where: Event_UrlWhereUniqueInput!, create: Event_UrlCreateInput!, update: Event_UrlUpdateInput!): Event_Url!
  deleteEvent_Url(where: Event_UrlWhereUniqueInput!): Event_Url
  deleteManyEvent_Urls(where: Event_UrlWhereInput): BatchPayload!
  createGeo_Json(data: Geo_JsonCreateInput!): Geo_Json!
  updateGeo_Json(data: Geo_JsonUpdateInput!, where: Geo_JsonWhereUniqueInput!): Geo_Json
  updateManyGeo_Jsons(data: Geo_JsonUpdateManyMutationInput!, where: Geo_JsonWhereInput): BatchPayload!
  upsertGeo_Json(where: Geo_JsonWhereUniqueInput!, create: Geo_JsonCreateInput!, update: Geo_JsonUpdateInput!): Geo_Json!
  deleteGeo_Json(where: Geo_JsonWhereUniqueInput!): Geo_Json
  deleteManyGeo_Jsons(where: Geo_JsonWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createNeighborhood(data: NeighborhoodCreateInput!): Neighborhood!
  updateNeighborhood(data: NeighborhoodUpdateInput!, where: NeighborhoodWhereUniqueInput!): Neighborhood
  upsertNeighborhood(where: NeighborhoodWhereUniqueInput!, create: NeighborhoodCreateInput!, update: NeighborhoodUpdateInput!): Neighborhood!
  deleteNeighborhood(where: NeighborhoodWhereUniqueInput!): Neighborhood
  deleteManyNeighborhoods(where: NeighborhoodWhereInput): BatchPayload!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Neighborhood {
  id: ID!
  geo_json: Geo_Json!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
}

type NeighborhoodConnection {
  pageInfo: PageInfo!
  edges: [NeighborhoodEdge]!
  aggregate: AggregateNeighborhood!
}

input NeighborhoodCreateInput {
  id: ID
  geo_json: Geo_JsonCreateOneWithoutNeighborhoodInput!
  locations: LocationCreateManyWithoutNeighborhoodInput
}

input NeighborhoodCreateOneWithoutGeo_jsonInput {
  create: NeighborhoodCreateWithoutGeo_jsonInput
  connect: NeighborhoodWhereUniqueInput
}

input NeighborhoodCreateOneWithoutLocationsInput {
  create: NeighborhoodCreateWithoutLocationsInput
  connect: NeighborhoodWhereUniqueInput
}

input NeighborhoodCreateWithoutGeo_jsonInput {
  id: ID
  locations: LocationCreateManyWithoutNeighborhoodInput
}

input NeighborhoodCreateWithoutLocationsInput {
  id: ID
  geo_json: Geo_JsonCreateOneWithoutNeighborhoodInput!
}

type NeighborhoodEdge {
  node: Neighborhood!
  cursor: String!
}

enum NeighborhoodOrderByInput {
  id_ASC
  id_DESC
}

type NeighborhoodPreviousValues {
  id: ID!
}

type NeighborhoodSubscriptionPayload {
  mutation: MutationType!
  node: Neighborhood
  updatedFields: [String!]
  previousValues: NeighborhoodPreviousValues
}

input NeighborhoodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NeighborhoodWhereInput
  AND: [NeighborhoodSubscriptionWhereInput!]
  OR: [NeighborhoodSubscriptionWhereInput!]
  NOT: [NeighborhoodSubscriptionWhereInput!]
}

input NeighborhoodUpdateInput {
  geo_json: Geo_JsonUpdateOneRequiredWithoutNeighborhoodInput
  locations: LocationUpdateManyWithoutNeighborhoodInput
}

input NeighborhoodUpdateOneRequiredWithoutGeo_jsonInput {
  create: NeighborhoodCreateWithoutGeo_jsonInput
  update: NeighborhoodUpdateWithoutGeo_jsonDataInput
  upsert: NeighborhoodUpsertWithoutGeo_jsonInput
  connect: NeighborhoodWhereUniqueInput
}

input NeighborhoodUpdateOneWithoutLocationsInput {
  create: NeighborhoodCreateWithoutLocationsInput
  update: NeighborhoodUpdateWithoutLocationsDataInput
  upsert: NeighborhoodUpsertWithoutLocationsInput
  delete: Boolean
  disconnect: Boolean
  connect: NeighborhoodWhereUniqueInput
}

input NeighborhoodUpdateWithoutGeo_jsonDataInput {
  locations: LocationUpdateManyWithoutNeighborhoodInput
}

input NeighborhoodUpdateWithoutLocationsDataInput {
  geo_json: Geo_JsonUpdateOneRequiredWithoutNeighborhoodInput
}

input NeighborhoodUpsertWithoutGeo_jsonInput {
  update: NeighborhoodUpdateWithoutGeo_jsonDataInput!
  create: NeighborhoodCreateWithoutGeo_jsonInput!
}

input NeighborhoodUpsertWithoutLocationsInput {
  update: NeighborhoodUpdateWithoutLocationsDataInput!
  create: NeighborhoodCreateWithoutLocationsInput!
}

input NeighborhoodWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  geo_json: Geo_JsonWhereInput
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
  AND: [NeighborhoodWhereInput!]
  OR: [NeighborhoodWhereInput!]
  NOT: [NeighborhoodWhereInput!]
}

input NeighborhoodWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type Organization {
  id: ID!
  name: String!
  url: String
  phone: String
  email: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type OrganizationConnection {
  pageInfo: PageInfo!
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  id: ID
  name: String!
  url: String
  phone: String
  email: String
  users: UserCreateManyWithoutOrganizationsInput
}

input OrganizationCreateManyWithoutUsersInput {
  create: [OrganizationCreateWithoutUsersInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input OrganizationCreateWithoutUsersInput {
  id: ID
  name: String!
  url: String
  phone: String
  email: String
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  url_ASC
  url_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
}

type OrganizationPreviousValues {
  id: ID!
  name: String!
  url: String
  phone: String
  email: String
}

input OrganizationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [OrganizationScalarWhereInput!]
  OR: [OrganizationScalarWhereInput!]
  NOT: [OrganizationScalarWhereInput!]
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
  AND: [OrganizationSubscriptionWhereInput!]
  OR: [OrganizationSubscriptionWhereInput!]
  NOT: [OrganizationSubscriptionWhereInput!]
}

input OrganizationUpdateInput {
  name: String
  url: String
  phone: String
  email: String
  users: UserUpdateManyWithoutOrganizationsInput
}

input OrganizationUpdateManyDataInput {
  name: String
  url: String
  phone: String
  email: String
}

input OrganizationUpdateManyMutationInput {
  name: String
  url: String
  phone: String
  email: String
}

input OrganizationUpdateManyWithoutUsersInput {
  create: [OrganizationCreateWithoutUsersInput!]
  delete: [OrganizationWhereUniqueInput!]
  connect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  disconnect: [OrganizationWhereUniqueInput!]
  update: [OrganizationUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [OrganizationUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [OrganizationScalarWhereInput!]
  updateMany: [OrganizationUpdateManyWithWhereNestedInput!]
}

input OrganizationUpdateManyWithWhereNestedInput {
  where: OrganizationScalarWhereInput!
  data: OrganizationUpdateManyDataInput!
}

input OrganizationUpdateWithoutUsersDataInput {
  name: String
  url: String
  phone: String
  email: String
}

input OrganizationUpdateWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateWithoutUsersDataInput!
}

input OrganizationUpsertWithWhereUniqueWithoutUsersInput {
  where: OrganizationWhereUniqueInput!
  update: OrganizationUpdateWithoutUsersDataInput!
  create: OrganizationCreateWithoutUsersInput!
}

input OrganizationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  event(where: EventWhereUniqueInput!): Event
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  eventImage(where: Event_ImageWhereUniqueInput!): Event_Image
  eventImages(where: Event_ImageWhereInput, orderBy: Event_ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Image]!
  eventImagesConnection(where: Event_ImageWhereInput, orderBy: Event_ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Event_ImageConnection!
  eventUrl(where: Event_UrlWhereUniqueInput!): Event_Url
  eventUrls(where: Event_UrlWhereInput, orderBy: Event_UrlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Url]!
  eventUrlsConnection(where: Event_UrlWhereInput, orderBy: Event_UrlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Event_UrlConnection!
  geoJson(where: Geo_JsonWhereUniqueInput!): Geo_Json
  geoJsons(where: Geo_JsonWhereInput, orderBy: Geo_JsonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Geo_Json]!
  geoJsonsConnection(where: Geo_JsonWhereInput, orderBy: Geo_JsonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Geo_JsonConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  neighborhood(where: NeighborhoodWhereUniqueInput!): Neighborhood
  neighborhoods(where: NeighborhoodWhereInput, orderBy: NeighborhoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Neighborhood]!
  neighborhoodsConnection(where: NeighborhoodWhereInput, orderBy: NeighborhoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NeighborhoodConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  eventImage(where: Event_ImageSubscriptionWhereInput): Event_ImageSubscriptionPayload
  eventUrl(where: Event_UrlSubscriptionWhereInput): Event_UrlSubscriptionPayload
  geoJson(where: Geo_JsonSubscriptionWhereInput): Geo_JsonSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  neighborhood(where: NeighborhoodSubscriptionWhereInput): NeighborhoodSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  title: String!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  title: String!
  events: EventCreateManyWithoutTagsInput
}

input TagCreateManyWithoutEventsInput {
  create: [TagCreateWithoutEventsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutEventsInput {
  id: ID
  title: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type TagPreviousValues {
  id: ID!
  title: String!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  title: String
  events: EventUpdateManyWithoutTagsInput
}

input TagUpdateManyDataInput {
  title: String
}

input TagUpdateManyMutationInput {
  title: String
}

input TagUpdateManyWithoutEventsInput {
  create: [TagCreateWithoutEventsInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutEventsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutEventsInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutEventsDataInput {
  title: String
}

input TagUpdateWithWhereUniqueWithoutEventsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutEventsDataInput!
}

input TagUpsertWithWhereUniqueWithoutEventsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutEventsDataInput!
  create: TagCreateWithoutEventsInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  title: String
}

enum TicketType {
  PAID
  FREE
}

type User {
  id: ID!
  first_name: String
  last_name: String
  auth0_id: String!
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization!]
  rsvps(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  admin_for(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  created_events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  first_name: String
  last_name: String
  auth0_id: String!
  organizations: OrganizationCreateManyWithoutUsersInput
  rsvps: EventCreateManyWithoutRsvpsInput
  admin_for: EventCreateManyWithoutAdminsInput
  created_events: EventCreateManyWithoutCreatorInput
}

input UserCreateManyWithoutAdmin_forInput {
  create: [UserCreateWithoutAdmin_forInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutOrganizationsInput {
  create: [UserCreateWithoutOrganizationsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutRsvpsInput {
  create: [UserCreateWithoutRsvpsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreated_eventsInput {
  create: UserCreateWithoutCreated_eventsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAdmin_forInput {
  id: ID
  first_name: String
  last_name: String
  auth0_id: String!
  organizations: OrganizationCreateManyWithoutUsersInput
  rsvps: EventCreateManyWithoutRsvpsInput
  created_events: EventCreateManyWithoutCreatorInput
}

input UserCreateWithoutCreated_eventsInput {
  id: ID
  first_name: String
  last_name: String
  auth0_id: String!
  organizations: OrganizationCreateManyWithoutUsersInput
  rsvps: EventCreateManyWithoutRsvpsInput
  admin_for: EventCreateManyWithoutAdminsInput
}

input UserCreateWithoutOrganizationsInput {
  id: ID
  first_name: String
  last_name: String
  auth0_id: String!
  rsvps: EventCreateManyWithoutRsvpsInput
  admin_for: EventCreateManyWithoutAdminsInput
  created_events: EventCreateManyWithoutCreatorInput
}

input UserCreateWithoutRsvpsInput {
  id: ID
  first_name: String
  last_name: String
  auth0_id: String!
  organizations: OrganizationCreateManyWithoutUsersInput
  admin_for: EventCreateManyWithoutAdminsInput
  created_events: EventCreateManyWithoutCreatorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  auth0_id_ASC
  auth0_id_DESC
}

type UserPreviousValues {
  id: ID!
  first_name: String
  last_name: String
  auth0_id: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  auth0_id: String
  auth0_id_not: String
  auth0_id_in: [String!]
  auth0_id_not_in: [String!]
  auth0_id_lt: String
  auth0_id_lte: String
  auth0_id_gt: String
  auth0_id_gte: String
  auth0_id_contains: String
  auth0_id_not_contains: String
  auth0_id_starts_with: String
  auth0_id_not_starts_with: String
  auth0_id_ends_with: String
  auth0_id_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  first_name: String
  last_name: String
  auth0_id: String
  organizations: OrganizationUpdateManyWithoutUsersInput
  rsvps: EventUpdateManyWithoutRsvpsInput
  admin_for: EventUpdateManyWithoutAdminsInput
  created_events: EventUpdateManyWithoutCreatorInput
}

input UserUpdateManyDataInput {
  first_name: String
  last_name: String
  auth0_id: String
}

input UserUpdateManyMutationInput {
  first_name: String
  last_name: String
  auth0_id: String
}

input UserUpdateManyWithoutAdmin_forInput {
  create: [UserCreateWithoutAdmin_forInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAdmin_forInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAdmin_forInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutOrganizationsInput {
  create: [UserCreateWithoutOrganizationsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutOrganizationsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutOrganizationsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutRsvpsInput {
  create: [UserCreateWithoutRsvpsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRsvpsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRsvpsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutCreated_eventsInput {
  create: UserCreateWithoutCreated_eventsInput
  update: UserUpdateWithoutCreated_eventsDataInput
  upsert: UserUpsertWithoutCreated_eventsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAdmin_forDataInput {
  first_name: String
  last_name: String
  auth0_id: String
  organizations: OrganizationUpdateManyWithoutUsersInput
  rsvps: EventUpdateManyWithoutRsvpsInput
  created_events: EventUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutCreated_eventsDataInput {
  first_name: String
  last_name: String
  auth0_id: String
  organizations: OrganizationUpdateManyWithoutUsersInput
  rsvps: EventUpdateManyWithoutRsvpsInput
  admin_for: EventUpdateManyWithoutAdminsInput
}

input UserUpdateWithoutOrganizationsDataInput {
  first_name: String
  last_name: String
  auth0_id: String
  rsvps: EventUpdateManyWithoutRsvpsInput
  admin_for: EventUpdateManyWithoutAdminsInput
  created_events: EventUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutRsvpsDataInput {
  first_name: String
  last_name: String
  auth0_id: String
  organizations: OrganizationUpdateManyWithoutUsersInput
  admin_for: EventUpdateManyWithoutAdminsInput
  created_events: EventUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutAdmin_forInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAdmin_forDataInput!
}

input UserUpdateWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOrganizationsDataInput!
}

input UserUpdateWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRsvpsDataInput!
}

input UserUpsertWithoutCreated_eventsInput {
  update: UserUpdateWithoutCreated_eventsDataInput!
  create: UserCreateWithoutCreated_eventsInput!
}

input UserUpsertWithWhereUniqueWithoutAdmin_forInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAdmin_forDataInput!
  create: UserCreateWithoutAdmin_forInput!
}

input UserUpsertWithWhereUniqueWithoutOrganizationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOrganizationsDataInput!
  create: UserCreateWithoutOrganizationsInput!
}

input UserUpsertWithWhereUniqueWithoutRsvpsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRsvpsDataInput!
  create: UserCreateWithoutRsvpsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  auth0_id: String
  auth0_id_not: String
  auth0_id_in: [String!]
  auth0_id_not_in: [String!]
  auth0_id_lt: String
  auth0_id_lte: String
  auth0_id_gt: String
  auth0_id_gte: String
  auth0_id_contains: String
  auth0_id_not_contains: String
  auth0_id_starts_with: String
  auth0_id_not_starts_with: String
  auth0_id_ends_with: String
  auth0_id_not_ends_with: String
  organizations_every: OrganizationWhereInput
  organizations_some: OrganizationWhereInput
  organizations_none: OrganizationWhereInput
  rsvps_every: EventWhereInput
  rsvps_some: EventWhereInput
  rsvps_none: EventWhereInput
  admin_for_every: EventWhereInput
  admin_for_some: EventWhereInput
  admin_for_none: EventWhereInput
  created_events_every: EventWhereInput
  created_events_some: EventWhereInput
  created_events_none: EventWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  auth0_id: String
}
