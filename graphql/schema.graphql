#import User, Location, Event, Tags  from "../prisma-client/generated/prisma.graphql"
# import TMEvent from "../ticket-master/tm.schema.graphql"

input UserCheckIdInput {
  auth0_id: String!
}

input EventCreateTagInput {
  title: String!
}

input EventCreateImageInput {
  url: String!
}

type File {
  filename: String!
  mimetype: String!
  encoding: String!
}

input EventCreateInput {
  id: ID
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  event_images: [EventCreateImageInput!]
  rsvps: UserCreateManyWithoutRsvpsInput
  urls: Event_UrlCreateManyWithoutEventInput
  admin: UserCreateManyWithoutAdmin_forInput
  locations: LocationCreateManyWithoutEventInput
  tags: [EventCreateTagInput!]
}

input EventUpdateInput {
  title: String
  description: String
  start: DateTime
  end: DateTime
  creator: UserUpdateOneWithoutCreated_eventsInput
  event_images: Event_ImageUpdateManyWithoutEventInput
  rsvps: UserUpdateManyWithoutRsvpsInput
  urls: Event_UrlUpdateManyWithoutEventInput
  admins: UserUpdateManyWithoutAdmin_forInput
  locations: LocationUpdateManyWithoutEventInput
  tags: [EventCreateTagInput!]
}

input EventIdInput {
  id: ID!
}

type Location {
  id: ID!
  name: String!
  street_address: String!
  street_address_2: String
  city: String!
  zipcode: Int!
  state: String!
  latitude: Float
  longitude: Float
  distanceFromUser: Float
  distanceUnit: String
  event: Event!
  neighborhood: Neighborhood
}

type Event {
  id: ID!
  title: String!
  description: String!
  start: DateTime!
  end: DateTime!
  creator: User
  ticketType: TicketType!
  event_images(where: Event_ImageWhereInput, orderBy: Event_ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Image!]
  rsvps(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  urls(where: Event_UrlWhereInput, orderBy: Event_UrlOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event_Url!]
  admins(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  locations(
    where: LocationWhereInput, 
    orderBy: LocationOrderByInput, 
    skip: Int, after: String, 
    before: String, 
    first: Int, 
    last: Int, 
    # userLatitude and userLongitude args used to calculate distance to event
    userLatitude: Float,
    userLongitude: Float,
    # distanceUnit for event is "miles" or "kilometers" to comply with turf requirements
    distanceUnit: String
    ): [Location!]
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
}

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  checkId(data: UserCheckIdInput!): [User]
  events(
    where: EventWhereInput
    orderBy: EventOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Event!]
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  ticketMasterEvents(
    radius: Int
    # "miles" or "km"
    unit: String
    #number of events per page
    size: Int
    page: String
    keyword: String
    #Point to search for events from "30.00,-67.00" . NO SPACES
    latlong: String
    startDateTime: DateTime
    endDateTime: DateTime
    city: String
    countryCode: String
    stateCode: String
    postalCode: String
  ): TMResults
  ticketMasterEventsAlt(
    radius: Int
    # "miles" or "km"
    unit: String
    #number of events per page
    size: Int
    page: String
    keyword: String
    #Point to search for events from "30.00,-67.00" . NO SPACES
    latlong: String
    startDateTime: DateTime
    endDateTime: DateTime
    city: String
    countryCode: String
    stateCode: String
    postalCode: String
  ): TMResultsAlt
}

type Mutation {
  addUser(data: UserCreateInput!): User!
  deleteEvent(where: EventWhereUniqueInput!): Event
  addRsvp(event: EventIdInput!): User
  removeRsvp(event: EventIdInput!): User
}
